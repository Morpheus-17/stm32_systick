
systick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003350  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080034e8  080034e8  000044e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003538  08003538  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003538  08003538  00004538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003540  08003540  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003540  08003540  00004540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003544  08003544  00004544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003548  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  20000068  080035b0  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  080035b0  00005338  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e1a  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a90  00000000  00000000  0000deb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c8  00000000  00000000  0000f948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005df  00000000  00000000  00010110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000166c0  00000000  00000000  000106ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a068  00000000  00000000  00026daf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008785d  00000000  00000000  00030e17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8674  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024a4  00000000  00000000  000b86b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000bab5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000068 	.word	0x20000068
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080034d0 	.word	0x080034d0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000006c 	.word	0x2000006c
 80001d4:	080034d0 	.word	0x080034d0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <SystickCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int cycleMotor;
int cycleSensor;
void SystickCallback(){
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
	if(cycleMotor > 0) cycleMotor--;
 80004cc:	4b0b      	ldr	r3, [pc, #44]	@ (80004fc <SystickCallback+0x34>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	dd04      	ble.n	80004de <SystickCallback+0x16>
 80004d4:	4b09      	ldr	r3, [pc, #36]	@ (80004fc <SystickCallback+0x34>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	3b01      	subs	r3, #1
 80004da:	4a08      	ldr	r2, [pc, #32]	@ (80004fc <SystickCallback+0x34>)
 80004dc:	6013      	str	r3, [r2, #0]
	if(cycleSensor > 0) cycleSensor--;
 80004de:	4b08      	ldr	r3, [pc, #32]	@ (8000500 <SystickCallback+0x38>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	dd04      	ble.n	80004f0 <SystickCallback+0x28>
 80004e6:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <SystickCallback+0x38>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	3b01      	subs	r3, #1
 80004ec:	4a04      	ldr	r2, [pc, #16]	@ (8000500 <SystickCallback+0x38>)
 80004ee:	6013      	str	r3, [r2, #0]
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	200000cc 	.word	0x200000cc
 8000500:	200000d0 	.word	0x200000d0

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f000 faee 	bl	8000ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050c:	f000 f832 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000510:	f000 f8b8 	bl	8000684 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000514:	f000 f88c 	bl	8000630 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  initUart(&huart2);
 8000518:	4810      	ldr	r0, [pc, #64]	@ (800055c <main+0x58>)
 800051a:	f000 fa35 	bl	8000988 <initUart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	if(cycleMotor==0){
 800051e:	4b10      	ldr	r3, [pc, #64]	@ (8000560 <main+0x5c>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d106      	bne.n	8000534 <main+0x30>
  		cycleMotor = 300;
 8000526:	4b0e      	ldr	r3, [pc, #56]	@ (8000560 <main+0x5c>)
 8000528:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800052c:	601a      	str	r2, [r3, #0]
  		printf("Motor is run\n");
 800052e:	480d      	ldr	r0, [pc, #52]	@ (8000564 <main+0x60>)
 8000530:	f002 fc3a 	bl	8002da8 <puts>
  	}

  	if(cycleSensor == 0){
 8000534:	4b0c      	ldr	r3, [pc, #48]	@ (8000568 <main+0x64>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d106      	bne.n	800054a <main+0x46>
  		cycleSensor = 736;
 800053c:	4b0a      	ldr	r3, [pc, #40]	@ (8000568 <main+0x64>)
 800053e:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8000542:	601a      	str	r2, [r3, #0]
  		printf("Sensor is run\n");
 8000544:	4809      	ldr	r0, [pc, #36]	@ (800056c <main+0x68>)
 8000546:	f002 fc2f 	bl	8002da8 <puts>
  	}

  	if(getUart()=='c'){
 800054a:	f000 fa71 	bl	8000a30 <getUart>
 800054e:	4603      	mov	r3, r0
 8000550:	2b63      	cmp	r3, #99	@ 0x63
 8000552:	d1e4      	bne.n	800051e <main+0x1a>
  		printf("received character c\n");
 8000554:	4806      	ldr	r0, [pc, #24]	@ (8000570 <main+0x6c>)
 8000556:	f002 fc27 	bl	8002da8 <puts>
  	if(cycleMotor==0){
 800055a:	e7e0      	b.n	800051e <main+0x1a>
 800055c:	20000084 	.word	0x20000084
 8000560:	200000cc 	.word	0x200000cc
 8000564:	080034e8 	.word	0x080034e8
 8000568:	200000d0 	.word	0x200000d0
 800056c:	080034f8 	.word	0x080034f8
 8000570:	08003508 	.word	0x08003508

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b094      	sub	sp, #80	@ 0x50
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0320 	add.w	r3, r7, #32
 800057e:	2230      	movs	r2, #48	@ 0x30
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f002 fcf0 	bl	8002f68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000598:	2300      	movs	r3, #0
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	4b22      	ldr	r3, [pc, #136]	@ (8000628 <SystemClock_Config+0xb4>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a0:	4a21      	ldr	r2, [pc, #132]	@ (8000628 <SystemClock_Config+0xb4>)
 80005a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000628 <SystemClock_Config+0xb4>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	4b1c      	ldr	r3, [pc, #112]	@ (800062c <SystemClock_Config+0xb8>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a1b      	ldr	r2, [pc, #108]	@ (800062c <SystemClock_Config+0xb8>)
 80005be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	4b19      	ldr	r3, [pc, #100]	@ (800062c <SystemClock_Config+0xb8>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d0:	2302      	movs	r3, #2
 80005d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d4:	2301      	movs	r3, #1
 80005d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d8:	2310      	movs	r3, #16
 80005da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005dc:	2300      	movs	r3, #0
 80005de:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 0320 	add.w	r3, r7, #32
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 fe19 	bl	800121c <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005f0:	f000 f862 	bl	80006b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005f8:	2300      	movs	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f001 f87c 	bl	800170c <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800061a:	f000 f84d 	bl	80006b8 <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	3750      	adds	r7, #80	@ 0x50
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000634:	4b11      	ldr	r3, [pc, #68]	@ (800067c <MX_USART2_UART_Init+0x4c>)
 8000636:	4a12      	ldr	r2, [pc, #72]	@ (8000680 <MX_USART2_UART_Init+0x50>)
 8000638:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800063a:	4b10      	ldr	r3, [pc, #64]	@ (800067c <MX_USART2_UART_Init+0x4c>)
 800063c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000640:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000642:	4b0e      	ldr	r3, [pc, #56]	@ (800067c <MX_USART2_UART_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000648:	4b0c      	ldr	r3, [pc, #48]	@ (800067c <MX_USART2_UART_Init+0x4c>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800064e:	4b0b      	ldr	r3, [pc, #44]	@ (800067c <MX_USART2_UART_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000654:	4b09      	ldr	r3, [pc, #36]	@ (800067c <MX_USART2_UART_Init+0x4c>)
 8000656:	220c      	movs	r2, #12
 8000658:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065a:	4b08      	ldr	r3, [pc, #32]	@ (800067c <MX_USART2_UART_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000660:	4b06      	ldr	r3, [pc, #24]	@ (800067c <MX_USART2_UART_Init+0x4c>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000666:	4805      	ldr	r0, [pc, #20]	@ (800067c <MX_USART2_UART_Init+0x4c>)
 8000668:	f001 fa30 	bl	8001acc <HAL_UART_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000672:	f000 f821 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000084 	.word	0x20000084
 8000680:	40004400 	.word	0x40004400

08000684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	4b09      	ldr	r3, [pc, #36]	@ (80006b4 <MX_GPIO_Init+0x30>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	4a08      	ldr	r2, [pc, #32]	@ (80006b4 <MX_GPIO_Init+0x30>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	6313      	str	r3, [r2, #48]	@ 0x30
 800069a:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <MX_GPIO_Init+0x30>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800

080006b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006bc:	b672      	cpsid	i
}
 80006be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c0:	bf00      	nop
 80006c2:	e7fd      	b.n	80006c0 <Error_Handler+0x8>

080006c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	4b10      	ldr	r3, [pc, #64]	@ (8000710 <HAL_MspInit+0x4c>)
 80006d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000710 <HAL_MspInit+0x4c>)
 80006d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80006da:	4b0d      	ldr	r3, [pc, #52]	@ (8000710 <HAL_MspInit+0x4c>)
 80006dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <HAL_MspInit+0x4c>)
 80006ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ee:	4a08      	ldr	r2, [pc, #32]	@ (8000710 <HAL_MspInit+0x4c>)
 80006f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f6:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <HAL_MspInit+0x4c>)
 80006f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800

08000714 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	@ 0x28
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a1d      	ldr	r2, [pc, #116]	@ (80007a8 <HAL_UART_MspInit+0x94>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d133      	bne.n	800079e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
 800073a:	4b1c      	ldr	r3, [pc, #112]	@ (80007ac <HAL_UART_MspInit+0x98>)
 800073c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073e:	4a1b      	ldr	r2, [pc, #108]	@ (80007ac <HAL_UART_MspInit+0x98>)
 8000740:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000744:	6413      	str	r3, [r2, #64]	@ 0x40
 8000746:	4b19      	ldr	r3, [pc, #100]	@ (80007ac <HAL_UART_MspInit+0x98>)
 8000748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	4b15      	ldr	r3, [pc, #84]	@ (80007ac <HAL_UART_MspInit+0x98>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4a14      	ldr	r2, [pc, #80]	@ (80007ac <HAL_UART_MspInit+0x98>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4b12      	ldr	r3, [pc, #72]	@ (80007ac <HAL_UART_MspInit+0x98>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800076e:	230c      	movs	r3, #12
 8000770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000772:	2302      	movs	r3, #2
 8000774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077a:	2303      	movs	r3, #3
 800077c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800077e:	2307      	movs	r3, #7
 8000780:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	4619      	mov	r1, r3
 8000788:	4809      	ldr	r0, [pc, #36]	@ (80007b0 <HAL_UART_MspInit+0x9c>)
 800078a:	f000 fbc3 	bl	8000f14 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2100      	movs	r1, #0
 8000792:	2026      	movs	r0, #38	@ 0x26
 8000794:	f000 faf5 	bl	8000d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000798:	2026      	movs	r0, #38	@ 0x26
 800079a:	f000 fb0e 	bl	8000dba <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800079e:	bf00      	nop
 80007a0:	3728      	adds	r7, #40	@ 0x28
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40004400 	.word	0x40004400
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40020000 	.word	0x40020000

080007b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <NMI_Handler+0x4>

080007bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <HardFault_Handler+0x4>

080007c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c8:	bf00      	nop
 80007ca:	e7fd      	b.n	80007c8 <MemManage_Handler+0x4>

080007cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <BusFault_Handler+0x4>

080007d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d8:	bf00      	nop
 80007da:	e7fd      	b.n	80007d8 <UsageFault_Handler+0x4>

080007dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr

080007ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr

08000806 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800080a:	f000 f9bf 	bl	8000b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SystickCallback();
 800080e:	f7ff fe5b 	bl	80004c8 <SystickCallback>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800081c:	4802      	ldr	r0, [pc, #8]	@ (8000828 <USART2_IRQHandler+0x10>)
 800081e:	f001 fa55 	bl	8001ccc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000084 	.word	0x20000084

0800082c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	e00a      	b.n	8000854 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800083e:	f3af 8000 	nop.w
 8000842:	4601      	mov	r1, r0
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	1c5a      	adds	r2, r3, #1
 8000848:	60ba      	str	r2, [r7, #8]
 800084a:	b2ca      	uxtb	r2, r1
 800084c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	3301      	adds	r3, #1
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	697a      	ldr	r2, [r7, #20]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	429a      	cmp	r2, r3
 800085a:	dbf0      	blt.n	800083e <_read+0x12>
  }

  return len;
 800085c:	687b      	ldr	r3, [r7, #4]
}
 800085e:	4618      	mov	r0, r3
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000866:	b480      	push	{r7}
 8000868:	b083      	sub	sp, #12
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800086e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000872:	4618      	mov	r0, r3
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800087e:	b480      	push	{r7}
 8000880:	b083      	sub	sp, #12
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
 8000886:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800088e:	605a      	str	r2, [r3, #4]
  return 0;
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <_isatty>:

int _isatty(int file)
{
 800089e:	b480      	push	{r7}
 80008a0:	b083      	sub	sp, #12
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008a6:	2301      	movs	r3, #1
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3714      	adds	r7, #20
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
	...

080008d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d8:	4a14      	ldr	r2, [pc, #80]	@ (800092c <_sbrk+0x5c>)
 80008da:	4b15      	ldr	r3, [pc, #84]	@ (8000930 <_sbrk+0x60>)
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008e4:	4b13      	ldr	r3, [pc, #76]	@ (8000934 <_sbrk+0x64>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d102      	bne.n	80008f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008ec:	4b11      	ldr	r3, [pc, #68]	@ (8000934 <_sbrk+0x64>)
 80008ee:	4a12      	ldr	r2, [pc, #72]	@ (8000938 <_sbrk+0x68>)
 80008f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008f2:	4b10      	ldr	r3, [pc, #64]	@ (8000934 <_sbrk+0x64>)
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4413      	add	r3, r2
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d207      	bcs.n	8000910 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000900:	f002 fb80 	bl	8003004 <__errno>
 8000904:	4603      	mov	r3, r0
 8000906:	220c      	movs	r2, #12
 8000908:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800090a:	f04f 33ff 	mov.w	r3, #4294967295
 800090e:	e009      	b.n	8000924 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000910:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <_sbrk+0x64>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000916:	4b07      	ldr	r3, [pc, #28]	@ (8000934 <_sbrk+0x64>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	4a05      	ldr	r2, [pc, #20]	@ (8000934 <_sbrk+0x64>)
 8000920:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000922:	68fb      	ldr	r3, [r7, #12]
}
 8000924:	4618      	mov	r0, r3
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20020000 	.word	0x20020000
 8000930:	00000400 	.word	0x00000400
 8000934:	200000d4 	.word	0x200000d4
 8000938:	20000338 	.word	0x20000338

0800093c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000940:	4b06      	ldr	r3, [pc, #24]	@ (800095c <SystemInit+0x20>)
 8000942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000946:	4a05      	ldr	r2, [pc, #20]	@ (800095c <SystemInit+0x20>)
 8000948:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800094c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <_write>:
#define rxBufferMax 255
int rxBufferWrite;							// write receivebuffer pointer
int rxBufferRead;								// read receivebuffer pointer
uint8_t rxBuffer[rxBufferMax];	// receivebuffer

void _write(int file, char* p, int len){
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(myHuart, (uint8_t*)p, len, 10);
 800096c:	4b05      	ldr	r3, [pc, #20]	@ (8000984 <_write+0x24>)
 800096e:	6818      	ldr	r0, [r3, #0]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	b29a      	uxth	r2, r3
 8000974:	230a      	movs	r3, #10
 8000976:	68b9      	ldr	r1, [r7, #8]
 8000978:	f001 f8f8 	bl	8001b6c <HAL_UART_Transmit>
	return len;
 800097c:	bf00      	nop
}
 800097e:	3710      	adds	r7, #16
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	200000d8 	.word	0x200000d8

08000988 <initUart>:


//initialize uart device
void initUart(UART_HandleTypeDef* inHuart){
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	//initialize uart device name
	myHuart = inHuart;
 8000990:	4a0a      	ldr	r2, [pc, #40]	@ (80009bc <initUart+0x34>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6013      	str	r3, [r2, #0]

	//receive interrupt setting
	HAL_UART_Receive_IT(myHuart, &rxChar, 1);
 8000996:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <initUart+0x34>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2201      	movs	r2, #1
 800099c:	4908      	ldr	r1, [pc, #32]	@ (80009c0 <initUart+0x38>)
 800099e:	4618      	mov	r0, r3
 80009a0:	f001 f96f 	bl	8001c82 <HAL_UART_Receive_IT>
	rxBufferRead = rxBufferWrite = 0;
 80009a4:	4b07      	ldr	r3, [pc, #28]	@ (80009c4 <initUart+0x3c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <initUart+0x3c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a06      	ldr	r2, [pc, #24]	@ (80009c8 <initUart+0x40>)
 80009b0:	6013      	str	r3, [r2, #0]
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200000d8 	.word	0x200000d8
 80009c0:	200000dc 	.word	0x200000dc
 80009c4:	200000e0 	.word	0x200000e0
 80009c8:	200000e4 	.word	0x200000e4

080009cc <HAL_UART_RxCpltCallback>:

// 지정되어 있는 함수로 스펠링도 틀리면 안된다
// 문자수신 처리 함수 구현
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	// 수신된 문자를 버퍼에 저장하고 쓰기 포인터의 값을 1 증가
	rxBuffer[rxBufferWrite++] = rxChar;
 80009d4:	4b11      	ldr	r3, [pc, #68]	@ (8000a1c <HAL_UART_RxCpltCallback+0x50>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	1c5a      	adds	r2, r3, #1
 80009da:	4910      	ldr	r1, [pc, #64]	@ (8000a1c <HAL_UART_RxCpltCallback+0x50>)
 80009dc:	600a      	str	r2, [r1, #0]
 80009de:	4a10      	ldr	r2, [pc, #64]	@ (8000a20 <HAL_UART_RxCpltCallback+0x54>)
 80009e0:	7811      	ldrb	r1, [r2, #0]
 80009e2:	4a10      	ldr	r2, [pc, #64]	@ (8000a24 <HAL_UART_RxCpltCallback+0x58>)
 80009e4:	54d1      	strb	r1, [r2, r3]
	// 쓰기 포인터의 값이 최대치에 도달하면 다시 0으로 초기화
	rxBufferWrite %= rxBufferMax;
 80009e6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a1c <HAL_UART_RxCpltCallback+0x50>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <HAL_UART_RxCpltCallback+0x5c>)
 80009ec:	fb83 1302 	smull	r1, r3, r3, r2
 80009f0:	4413      	add	r3, r2
 80009f2:	11d9      	asrs	r1, r3, #7
 80009f4:	17d3      	asrs	r3, r2, #31
 80009f6:	1ac9      	subs	r1, r1, r3
 80009f8:	460b      	mov	r3, r1
 80009fa:	021b      	lsls	r3, r3, #8
 80009fc:	1a5b      	subs	r3, r3, r1
 80009fe:	1ad1      	subs	r1, r2, r3
 8000a00:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <HAL_UART_RxCpltCallback+0x50>)
 8000a02:	6019      	str	r1, [r3, #0]
	// 다음 문자 수신 인터럽트를 위하여 재설정 (아래를 선언하여 재설정을 안해주면 한번만 되고 그다음 버퍼 저장을 안해버림)
	HAL_UART_Receive_IT(myHuart, &rxChar, 1);
 8000a04:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <HAL_UART_RxCpltCallback+0x60>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2201      	movs	r2, #1
 8000a0a:	4905      	ldr	r1, [pc, #20]	@ (8000a20 <HAL_UART_RxCpltCallback+0x54>)
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f001 f938 	bl	8001c82 <HAL_UART_Receive_IT>
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200000e0 	.word	0x200000e0
 8000a20:	200000dc 	.word	0x200000dc
 8000a24:	200000e8 	.word	0x200000e8
 8000a28:	80808081 	.word	0x80808081
 8000a2c:	200000d8 	.word	0x200000d8

08000a30 <getUart>:

// 버퍼에서 문자 한개 꺼내오기
uint8_t getUart(){
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
	uint8_t result;
	// 쓰기 포인터와 읽기 포인터가 없으면 수신된 문자 없음
	if(rxBufferWrite == rxBufferRead) return 0;
 8000a36:	4b13      	ldr	r3, [pc, #76]	@ (8000a84 <getUart+0x54>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	4b13      	ldr	r3, [pc, #76]	@ (8000a88 <getUart+0x58>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	d101      	bne.n	8000a46 <getUart+0x16>
 8000a42:	2300      	movs	r3, #0
 8000a44:	e017      	b.n	8000a76 <getUart+0x46>
	else {
		//읽기 포인터가 가르키는 위치의 버퍼문자를 꺼내고, 읽기 포인터를 1 증가
		result = rxBuffer[rxBufferRead++];
 8000a46:	4b10      	ldr	r3, [pc, #64]	@ (8000a88 <getUart+0x58>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	1c5a      	adds	r2, r3, #1
 8000a4c:	490e      	ldr	r1, [pc, #56]	@ (8000a88 <getUart+0x58>)
 8000a4e:	600a      	str	r2, [r1, #0]
 8000a50:	4a0e      	ldr	r2, [pc, #56]	@ (8000a8c <getUart+0x5c>)
 8000a52:	5cd3      	ldrb	r3, [r2, r3]
 8000a54:	71fb      	strb	r3, [r7, #7]
		//읽기 포인터가 최대치에 도달하면 다시 0으로 초기화
		rxBufferRead %= rxBufferMax;
 8000a56:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <getUart+0x58>)
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a90 <getUart+0x60>)
 8000a5c:	fb83 1302 	smull	r1, r3, r3, r2
 8000a60:	4413      	add	r3, r2
 8000a62:	11d9      	asrs	r1, r3, #7
 8000a64:	17d3      	asrs	r3, r2, #31
 8000a66:	1ac9      	subs	r1, r1, r3
 8000a68:	460b      	mov	r3, r1
 8000a6a:	021b      	lsls	r3, r3, #8
 8000a6c:	1a5b      	subs	r3, r3, r1
 8000a6e:	1ad1      	subs	r1, r2, r3
 8000a70:	4b05      	ldr	r3, [pc, #20]	@ (8000a88 <getUart+0x58>)
 8000a72:	6019      	str	r1, [r3, #0]
	}
	return result;
 8000a74:	79fb      	ldrb	r3, [r7, #7]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	200000e0 	.word	0x200000e0
 8000a88:	200000e4 	.word	0x200000e4
 8000a8c:	200000e8 	.word	0x200000e8
 8000a90:	80808081 	.word	0x80808081

08000a94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000acc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a98:	f7ff ff50 	bl	800093c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a9c:	480c      	ldr	r0, [pc, #48]	@ (8000ad0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a9e:	490d      	ldr	r1, [pc, #52]	@ (8000ad4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ad8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa4:	e002      	b.n	8000aac <LoopCopyDataInit>

08000aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aaa:	3304      	adds	r3, #4

08000aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab0:	d3f9      	bcc.n	8000aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8000adc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ab4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ae0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab8:	e001      	b.n	8000abe <LoopFillZerobss>

08000aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000abc:	3204      	adds	r2, #4

08000abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac0:	d3fb      	bcc.n	8000aba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ac2:	f002 faa5 	bl	8003010 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ac6:	f7ff fd1d 	bl	8000504 <main>
  bx  lr    
 8000aca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000acc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ad8:	08003548 	.word	0x08003548
  ldr r2, =_sbss
 8000adc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ae0:	20000338 	.word	0x20000338

08000ae4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae4:	e7fe      	b.n	8000ae4 <ADC_IRQHandler>
	...

08000ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aec:	4b0e      	ldr	r3, [pc, #56]	@ (8000b28 <HAL_Init+0x40>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0d      	ldr	r2, [pc, #52]	@ (8000b28 <HAL_Init+0x40>)
 8000af2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000af6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000af8:	4b0b      	ldr	r3, [pc, #44]	@ (8000b28 <HAL_Init+0x40>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a0a      	ldr	r2, [pc, #40]	@ (8000b28 <HAL_Init+0x40>)
 8000afe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b04:	4b08      	ldr	r3, [pc, #32]	@ (8000b28 <HAL_Init+0x40>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a07      	ldr	r2, [pc, #28]	@ (8000b28 <HAL_Init+0x40>)
 8000b0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b10:	2003      	movs	r0, #3
 8000b12:	f000 f92b 	bl	8000d6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b16:	200f      	movs	r0, #15
 8000b18:	f000 f808 	bl	8000b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b1c:	f7ff fdd2 	bl	80006c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40023c00 	.word	0x40023c00

08000b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b34:	4b12      	ldr	r3, [pc, #72]	@ (8000b80 <HAL_InitTick+0x54>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b12      	ldr	r3, [pc, #72]	@ (8000b84 <HAL_InitTick+0x58>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 f943 	bl	8000dd6 <HAL_SYSTICK_Config>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e00e      	b.n	8000b78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b0f      	cmp	r3, #15
 8000b5e:	d80a      	bhi.n	8000b76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b60:	2200      	movs	r2, #0
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	f000 f90b 	bl	8000d82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b6c:	4a06      	ldr	r2, [pc, #24]	@ (8000b88 <HAL_InitTick+0x5c>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e000      	b.n	8000b78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000000 	.word	0x20000000
 8000b84:	20000008 	.word	0x20000008
 8000b88:	20000004 	.word	0x20000004

08000b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b90:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <HAL_IncTick+0x20>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <HAL_IncTick+0x24>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a04      	ldr	r2, [pc, #16]	@ (8000bb0 <HAL_IncTick+0x24>)
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	200001e8 	.word	0x200001e8

08000bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	@ (8000bc8 <HAL_GetTick+0x14>)
 8000bba:	681b      	ldr	r3, [r3, #0]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	200001e8 	.word	0x200001e8

08000bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000be8:	4013      	ands	r3, r2
 8000bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bfe:	4a04      	ldr	r2, [pc, #16]	@ (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	60d3      	str	r3, [r2, #12]
}
 8000c04:	bf00      	nop
 8000c06:	3714      	adds	r7, #20
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c18:	4b04      	ldr	r3, [pc, #16]	@ (8000c2c <__NVIC_GetPriorityGrouping+0x18>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	0a1b      	lsrs	r3, r3, #8
 8000c1e:	f003 0307 	and.w	r3, r3, #7
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	db0b      	blt.n	8000c5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	f003 021f 	and.w	r2, r3, #31
 8000c48:	4907      	ldr	r1, [pc, #28]	@ (8000c68 <__NVIC_EnableIRQ+0x38>)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	095b      	lsrs	r3, r3, #5
 8000c50:	2001      	movs	r0, #1
 8000c52:	fa00 f202 	lsl.w	r2, r0, r2
 8000c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000e100 	.word	0xe000e100

08000c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	6039      	str	r1, [r7, #0]
 8000c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	db0a      	blt.n	8000c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	490c      	ldr	r1, [pc, #48]	@ (8000cb8 <__NVIC_SetPriority+0x4c>)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	0112      	lsls	r2, r2, #4
 8000c8c:	b2d2      	uxtb	r2, r2
 8000c8e:	440b      	add	r3, r1
 8000c90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c94:	e00a      	b.n	8000cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	4908      	ldr	r1, [pc, #32]	@ (8000cbc <__NVIC_SetPriority+0x50>)
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	f003 030f 	and.w	r3, r3, #15
 8000ca2:	3b04      	subs	r3, #4
 8000ca4:	0112      	lsls	r2, r2, #4
 8000ca6:	b2d2      	uxtb	r2, r2
 8000ca8:	440b      	add	r3, r1
 8000caa:	761a      	strb	r2, [r3, #24]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000e100 	.word	0xe000e100
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b089      	sub	sp, #36	@ 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	f1c3 0307 	rsb	r3, r3, #7
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	bf28      	it	cs
 8000cde:	2304      	movcs	r3, #4
 8000ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	2b06      	cmp	r3, #6
 8000ce8:	d902      	bls.n	8000cf0 <NVIC_EncodePriority+0x30>
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3b03      	subs	r3, #3
 8000cee:	e000      	b.n	8000cf2 <NVIC_EncodePriority+0x32>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43da      	mvns	r2, r3
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	401a      	ands	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d08:	f04f 31ff 	mov.w	r1, #4294967295
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d12:	43d9      	mvns	r1, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	4313      	orrs	r3, r2
         );
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3724      	adds	r7, #36	@ 0x24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
	...

08000d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d38:	d301      	bcc.n	8000d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e00f      	b.n	8000d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d68 <SysTick_Config+0x40>)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d46:	210f      	movs	r1, #15
 8000d48:	f04f 30ff 	mov.w	r0, #4294967295
 8000d4c:	f7ff ff8e 	bl	8000c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d50:	4b05      	ldr	r3, [pc, #20]	@ (8000d68 <SysTick_Config+0x40>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d56:	4b04      	ldr	r3, [pc, #16]	@ (8000d68 <SysTick_Config+0x40>)
 8000d58:	2207      	movs	r2, #7
 8000d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	e000e010 	.word	0xe000e010

08000d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff ff29 	bl	8000bcc <__NVIC_SetPriorityGrouping>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
 8000d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d94:	f7ff ff3e 	bl	8000c14 <__NVIC_GetPriorityGrouping>
 8000d98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	68b9      	ldr	r1, [r7, #8]
 8000d9e:	6978      	ldr	r0, [r7, #20]
 8000da0:	f7ff ff8e 	bl	8000cc0 <NVIC_EncodePriority>
 8000da4:	4602      	mov	r2, r0
 8000da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000daa:	4611      	mov	r1, r2
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff5d 	bl	8000c6c <__NVIC_SetPriority>
}
 8000db2:	bf00      	nop
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ff31 	bl	8000c30 <__NVIC_EnableIRQ>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff ffa2 	bl	8000d28 <SysTick_Config>
 8000de4:	4603      	mov	r3, r0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b084      	sub	sp, #16
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dfa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000dfc:	f7ff feda 	bl	8000bb4 <HAL_GetTick>
 8000e00:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d008      	beq.n	8000e20 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2280      	movs	r2, #128	@ 0x80
 8000e12:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e052      	b.n	8000ec6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f022 0216 	bic.w	r2, r2, #22
 8000e2e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	695a      	ldr	r2, [r3, #20]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000e3e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d103      	bne.n	8000e50 <HAL_DMA_Abort+0x62>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d007      	beq.n	8000e60 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f022 0208 	bic.w	r2, r2, #8
 8000e5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f022 0201 	bic.w	r2, r2, #1
 8000e6e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e70:	e013      	b.n	8000e9a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e72:	f7ff fe9f 	bl	8000bb4 <HAL_GetTick>
 8000e76:	4602      	mov	r2, r0
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	2b05      	cmp	r3, #5
 8000e7e:	d90c      	bls.n	8000e9a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2220      	movs	r2, #32
 8000e84:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2203      	movs	r2, #3
 8000e8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000e96:	2303      	movs	r3, #3
 8000e98:	e015      	b.n	8000ec6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d1e4      	bne.n	8000e72 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000eac:	223f      	movs	r2, #63	@ 0x3f
 8000eae:	409a      	lsls	r2, r3
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d004      	beq.n	8000eec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2280      	movs	r2, #128	@ 0x80
 8000ee6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e00c      	b.n	8000f06 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2205      	movs	r2, #5
 8000ef0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f022 0201 	bic.w	r2, r2, #1
 8000f02:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
	...

08000f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b089      	sub	sp, #36	@ 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
 8000f2e:	e159      	b.n	80011e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f30:	2201      	movs	r2, #1
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	f040 8148 	bne.w	80011de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f003 0303 	and.w	r3, r3, #3
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d005      	beq.n	8000f66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d130      	bne.n	8000fc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	2203      	movs	r2, #3
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	68da      	ldr	r2, [r3, #12]
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	091b      	lsrs	r3, r3, #4
 8000fb2:	f003 0201 	and.w	r2, r3, #1
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	2b03      	cmp	r3, #3
 8000fd2:	d017      	beq.n	8001004 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	2203      	movs	r2, #3
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	689a      	ldr	r2, [r3, #8]
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	2b02      	cmp	r3, #2
 800100e:	d123      	bne.n	8001058 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	08da      	lsrs	r2, r3, #3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3208      	adds	r2, #8
 8001018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800101c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	f003 0307 	and.w	r3, r3, #7
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	220f      	movs	r2, #15
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	691a      	ldr	r2, [r3, #16]
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	08da      	lsrs	r2, r3, #3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	3208      	adds	r2, #8
 8001052:	69b9      	ldr	r1, [r7, #24]
 8001054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	2203      	movs	r2, #3
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0203 	and.w	r2, r3, #3
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001094:	2b00      	cmp	r3, #0
 8001096:	f000 80a2 	beq.w	80011de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	4b57      	ldr	r3, [pc, #348]	@ (80011fc <HAL_GPIO_Init+0x2e8>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a2:	4a56      	ldr	r2, [pc, #344]	@ (80011fc <HAL_GPIO_Init+0x2e8>)
 80010a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010aa:	4b54      	ldr	r3, [pc, #336]	@ (80011fc <HAL_GPIO_Init+0x2e8>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010b6:	4a52      	ldr	r2, [pc, #328]	@ (8001200 <HAL_GPIO_Init+0x2ec>)
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	089b      	lsrs	r3, r3, #2
 80010bc:	3302      	adds	r3, #2
 80010be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	220f      	movs	r2, #15
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4013      	ands	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a49      	ldr	r2, [pc, #292]	@ (8001204 <HAL_GPIO_Init+0x2f0>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d019      	beq.n	8001116 <HAL_GPIO_Init+0x202>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a48      	ldr	r2, [pc, #288]	@ (8001208 <HAL_GPIO_Init+0x2f4>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d013      	beq.n	8001112 <HAL_GPIO_Init+0x1fe>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a47      	ldr	r2, [pc, #284]	@ (800120c <HAL_GPIO_Init+0x2f8>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d00d      	beq.n	800110e <HAL_GPIO_Init+0x1fa>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a46      	ldr	r2, [pc, #280]	@ (8001210 <HAL_GPIO_Init+0x2fc>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d007      	beq.n	800110a <HAL_GPIO_Init+0x1f6>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a45      	ldr	r2, [pc, #276]	@ (8001214 <HAL_GPIO_Init+0x300>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d101      	bne.n	8001106 <HAL_GPIO_Init+0x1f2>
 8001102:	2304      	movs	r3, #4
 8001104:	e008      	b.n	8001118 <HAL_GPIO_Init+0x204>
 8001106:	2307      	movs	r3, #7
 8001108:	e006      	b.n	8001118 <HAL_GPIO_Init+0x204>
 800110a:	2303      	movs	r3, #3
 800110c:	e004      	b.n	8001118 <HAL_GPIO_Init+0x204>
 800110e:	2302      	movs	r3, #2
 8001110:	e002      	b.n	8001118 <HAL_GPIO_Init+0x204>
 8001112:	2301      	movs	r3, #1
 8001114:	e000      	b.n	8001118 <HAL_GPIO_Init+0x204>
 8001116:	2300      	movs	r3, #0
 8001118:	69fa      	ldr	r2, [r7, #28]
 800111a:	f002 0203 	and.w	r2, r2, #3
 800111e:	0092      	lsls	r2, r2, #2
 8001120:	4093      	lsls	r3, r2
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001128:	4935      	ldr	r1, [pc, #212]	@ (8001200 <HAL_GPIO_Init+0x2ec>)
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	089b      	lsrs	r3, r3, #2
 800112e:	3302      	adds	r3, #2
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001136:	4b38      	ldr	r3, [pc, #224]	@ (8001218 <HAL_GPIO_Init+0x304>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800115a:	4a2f      	ldr	r2, [pc, #188]	@ (8001218 <HAL_GPIO_Init+0x304>)
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001160:	4b2d      	ldr	r3, [pc, #180]	@ (8001218 <HAL_GPIO_Init+0x304>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001184:	4a24      	ldr	r2, [pc, #144]	@ (8001218 <HAL_GPIO_Init+0x304>)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800118a:	4b23      	ldr	r3, [pc, #140]	@ (8001218 <HAL_GPIO_Init+0x304>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ae:	4a1a      	ldr	r2, [pc, #104]	@ (8001218 <HAL_GPIO_Init+0x304>)
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011b4:	4b18      	ldr	r3, [pc, #96]	@ (8001218 <HAL_GPIO_Init+0x304>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011d8:	4a0f      	ldr	r2, [pc, #60]	@ (8001218 <HAL_GPIO_Init+0x304>)
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3301      	adds	r3, #1
 80011e2:	61fb      	str	r3, [r7, #28]
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	2b0f      	cmp	r3, #15
 80011e8:	f67f aea2 	bls.w	8000f30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	3724      	adds	r7, #36	@ 0x24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40023800 	.word	0x40023800
 8001200:	40013800 	.word	0x40013800
 8001204:	40020000 	.word	0x40020000
 8001208:	40020400 	.word	0x40020400
 800120c:	40020800 	.word	0x40020800
 8001210:	40020c00 	.word	0x40020c00
 8001214:	40021000 	.word	0x40021000
 8001218:	40013c00 	.word	0x40013c00

0800121c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e267      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	2b00      	cmp	r3, #0
 8001238:	d075      	beq.n	8001326 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800123a:	4b88      	ldr	r3, [pc, #544]	@ (800145c <HAL_RCC_OscConfig+0x240>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 030c 	and.w	r3, r3, #12
 8001242:	2b04      	cmp	r3, #4
 8001244:	d00c      	beq.n	8001260 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001246:	4b85      	ldr	r3, [pc, #532]	@ (800145c <HAL_RCC_OscConfig+0x240>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800124e:	2b08      	cmp	r3, #8
 8001250:	d112      	bne.n	8001278 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001252:	4b82      	ldr	r3, [pc, #520]	@ (800145c <HAL_RCC_OscConfig+0x240>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800125a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800125e:	d10b      	bne.n	8001278 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001260:	4b7e      	ldr	r3, [pc, #504]	@ (800145c <HAL_RCC_OscConfig+0x240>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d05b      	beq.n	8001324 <HAL_RCC_OscConfig+0x108>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d157      	bne.n	8001324 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e242      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001280:	d106      	bne.n	8001290 <HAL_RCC_OscConfig+0x74>
 8001282:	4b76      	ldr	r3, [pc, #472]	@ (800145c <HAL_RCC_OscConfig+0x240>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a75      	ldr	r2, [pc, #468]	@ (800145c <HAL_RCC_OscConfig+0x240>)
 8001288:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	e01d      	b.n	80012cc <HAL_RCC_OscConfig+0xb0>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001298:	d10c      	bne.n	80012b4 <HAL_RCC_OscConfig+0x98>
 800129a:	4b70      	ldr	r3, [pc, #448]	@ (800145c <HAL_RCC_OscConfig+0x240>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a6f      	ldr	r2, [pc, #444]	@ (800145c <HAL_RCC_OscConfig+0x240>)
 80012a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	4b6d      	ldr	r3, [pc, #436]	@ (800145c <HAL_RCC_OscConfig+0x240>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a6c      	ldr	r2, [pc, #432]	@ (800145c <HAL_RCC_OscConfig+0x240>)
 80012ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	e00b      	b.n	80012cc <HAL_RCC_OscConfig+0xb0>
 80012b4:	4b69      	ldr	r3, [pc, #420]	@ (800145c <HAL_RCC_OscConfig+0x240>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a68      	ldr	r2, [pc, #416]	@ (800145c <HAL_RCC_OscConfig+0x240>)
 80012ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	4b66      	ldr	r3, [pc, #408]	@ (800145c <HAL_RCC_OscConfig+0x240>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a65      	ldr	r2, [pc, #404]	@ (800145c <HAL_RCC_OscConfig+0x240>)
 80012c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d013      	beq.n	80012fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d4:	f7ff fc6e 	bl	8000bb4 <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012dc:	f7ff fc6a 	bl	8000bb4 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b64      	cmp	r3, #100	@ 0x64
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e207      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ee:	4b5b      	ldr	r3, [pc, #364]	@ (800145c <HAL_RCC_OscConfig+0x240>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0f0      	beq.n	80012dc <HAL_RCC_OscConfig+0xc0>
 80012fa:	e014      	b.n	8001326 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fc5a 	bl	8000bb4 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001304:	f7ff fc56 	bl	8000bb4 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b64      	cmp	r3, #100	@ 0x64
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e1f3      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001316:	4b51      	ldr	r3, [pc, #324]	@ (800145c <HAL_RCC_OscConfig+0x240>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f0      	bne.n	8001304 <HAL_RCC_OscConfig+0xe8>
 8001322:	e000      	b.n	8001326 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d063      	beq.n	80013fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001332:	4b4a      	ldr	r3, [pc, #296]	@ (800145c <HAL_RCC_OscConfig+0x240>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 030c 	and.w	r3, r3, #12
 800133a:	2b00      	cmp	r3, #0
 800133c:	d00b      	beq.n	8001356 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800133e:	4b47      	ldr	r3, [pc, #284]	@ (800145c <HAL_RCC_OscConfig+0x240>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001346:	2b08      	cmp	r3, #8
 8001348:	d11c      	bne.n	8001384 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800134a:	4b44      	ldr	r3, [pc, #272]	@ (800145c <HAL_RCC_OscConfig+0x240>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d116      	bne.n	8001384 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001356:	4b41      	ldr	r3, [pc, #260]	@ (800145c <HAL_RCC_OscConfig+0x240>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d005      	beq.n	800136e <HAL_RCC_OscConfig+0x152>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d001      	beq.n	800136e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e1c7      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136e:	4b3b      	ldr	r3, [pc, #236]	@ (800145c <HAL_RCC_OscConfig+0x240>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	4937      	ldr	r1, [pc, #220]	@ (800145c <HAL_RCC_OscConfig+0x240>)
 800137e:	4313      	orrs	r3, r2
 8001380:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001382:	e03a      	b.n	80013fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d020      	beq.n	80013ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800138c:	4b34      	ldr	r3, [pc, #208]	@ (8001460 <HAL_RCC_OscConfig+0x244>)
 800138e:	2201      	movs	r2, #1
 8001390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001392:	f7ff fc0f 	bl	8000bb4 <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800139a:	f7ff fc0b 	bl	8000bb4 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e1a8      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ac:	4b2b      	ldr	r3, [pc, #172]	@ (800145c <HAL_RCC_OscConfig+0x240>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0f0      	beq.n	800139a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b8:	4b28      	ldr	r3, [pc, #160]	@ (800145c <HAL_RCC_OscConfig+0x240>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	4925      	ldr	r1, [pc, #148]	@ (800145c <HAL_RCC_OscConfig+0x240>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	600b      	str	r3, [r1, #0]
 80013cc:	e015      	b.n	80013fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ce:	4b24      	ldr	r3, [pc, #144]	@ (8001460 <HAL_RCC_OscConfig+0x244>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d4:	f7ff fbee 	bl	8000bb4 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013dc:	f7ff fbea 	bl	8000bb4 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e187      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ee:	4b1b      	ldr	r3, [pc, #108]	@ (800145c <HAL_RCC_OscConfig+0x240>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f0      	bne.n	80013dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	2b00      	cmp	r3, #0
 8001404:	d036      	beq.n	8001474 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d016      	beq.n	800143c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800140e:	4b15      	ldr	r3, [pc, #84]	@ (8001464 <HAL_RCC_OscConfig+0x248>)
 8001410:	2201      	movs	r2, #1
 8001412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001414:	f7ff fbce 	bl	8000bb4 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800141c:	f7ff fbca 	bl	8000bb4 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e167      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800142e:	4b0b      	ldr	r3, [pc, #44]	@ (800145c <HAL_RCC_OscConfig+0x240>)
 8001430:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0x200>
 800143a:	e01b      	b.n	8001474 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800143c:	4b09      	ldr	r3, [pc, #36]	@ (8001464 <HAL_RCC_OscConfig+0x248>)
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001442:	f7ff fbb7 	bl	8000bb4 <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001448:	e00e      	b.n	8001468 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800144a:	f7ff fbb3 	bl	8000bb4 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d907      	bls.n	8001468 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e150      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
 800145c:	40023800 	.word	0x40023800
 8001460:	42470000 	.word	0x42470000
 8001464:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001468:	4b88      	ldr	r3, [pc, #544]	@ (800168c <HAL_RCC_OscConfig+0x470>)
 800146a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1ea      	bne.n	800144a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	2b00      	cmp	r3, #0
 800147e:	f000 8097 	beq.w	80015b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001482:	2300      	movs	r3, #0
 8001484:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001486:	4b81      	ldr	r3, [pc, #516]	@ (800168c <HAL_RCC_OscConfig+0x470>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10f      	bne.n	80014b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	4b7d      	ldr	r3, [pc, #500]	@ (800168c <HAL_RCC_OscConfig+0x470>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149a:	4a7c      	ldr	r2, [pc, #496]	@ (800168c <HAL_RCC_OscConfig+0x470>)
 800149c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014a2:	4b7a      	ldr	r3, [pc, #488]	@ (800168c <HAL_RCC_OscConfig+0x470>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ae:	2301      	movs	r3, #1
 80014b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b2:	4b77      	ldr	r3, [pc, #476]	@ (8001690 <HAL_RCC_OscConfig+0x474>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d118      	bne.n	80014f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014be:	4b74      	ldr	r3, [pc, #464]	@ (8001690 <HAL_RCC_OscConfig+0x474>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a73      	ldr	r2, [pc, #460]	@ (8001690 <HAL_RCC_OscConfig+0x474>)
 80014c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ca:	f7ff fb73 	bl	8000bb4 <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014d2:	f7ff fb6f 	bl	8000bb4 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e10c      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e4:	4b6a      	ldr	r3, [pc, #424]	@ (8001690 <HAL_RCC_OscConfig+0x474>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d0f0      	beq.n	80014d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d106      	bne.n	8001506 <HAL_RCC_OscConfig+0x2ea>
 80014f8:	4b64      	ldr	r3, [pc, #400]	@ (800168c <HAL_RCC_OscConfig+0x470>)
 80014fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014fc:	4a63      	ldr	r2, [pc, #396]	@ (800168c <HAL_RCC_OscConfig+0x470>)
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	6713      	str	r3, [r2, #112]	@ 0x70
 8001504:	e01c      	b.n	8001540 <HAL_RCC_OscConfig+0x324>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	2b05      	cmp	r3, #5
 800150c:	d10c      	bne.n	8001528 <HAL_RCC_OscConfig+0x30c>
 800150e:	4b5f      	ldr	r3, [pc, #380]	@ (800168c <HAL_RCC_OscConfig+0x470>)
 8001510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001512:	4a5e      	ldr	r2, [pc, #376]	@ (800168c <HAL_RCC_OscConfig+0x470>)
 8001514:	f043 0304 	orr.w	r3, r3, #4
 8001518:	6713      	str	r3, [r2, #112]	@ 0x70
 800151a:	4b5c      	ldr	r3, [pc, #368]	@ (800168c <HAL_RCC_OscConfig+0x470>)
 800151c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800151e:	4a5b      	ldr	r2, [pc, #364]	@ (800168c <HAL_RCC_OscConfig+0x470>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6713      	str	r3, [r2, #112]	@ 0x70
 8001526:	e00b      	b.n	8001540 <HAL_RCC_OscConfig+0x324>
 8001528:	4b58      	ldr	r3, [pc, #352]	@ (800168c <HAL_RCC_OscConfig+0x470>)
 800152a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800152c:	4a57      	ldr	r2, [pc, #348]	@ (800168c <HAL_RCC_OscConfig+0x470>)
 800152e:	f023 0301 	bic.w	r3, r3, #1
 8001532:	6713      	str	r3, [r2, #112]	@ 0x70
 8001534:	4b55      	ldr	r3, [pc, #340]	@ (800168c <HAL_RCC_OscConfig+0x470>)
 8001536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001538:	4a54      	ldr	r2, [pc, #336]	@ (800168c <HAL_RCC_OscConfig+0x470>)
 800153a:	f023 0304 	bic.w	r3, r3, #4
 800153e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d015      	beq.n	8001574 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001548:	f7ff fb34 	bl	8000bb4 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800154e:	e00a      	b.n	8001566 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001550:	f7ff fb30 	bl	8000bb4 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800155e:	4293      	cmp	r3, r2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e0cb      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001566:	4b49      	ldr	r3, [pc, #292]	@ (800168c <HAL_RCC_OscConfig+0x470>)
 8001568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0ee      	beq.n	8001550 <HAL_RCC_OscConfig+0x334>
 8001572:	e014      	b.n	800159e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001574:	f7ff fb1e 	bl	8000bb4 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800157a:	e00a      	b.n	8001592 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800157c:	f7ff fb1a 	bl	8000bb4 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800158a:	4293      	cmp	r3, r2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e0b5      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001592:	4b3e      	ldr	r3, [pc, #248]	@ (800168c <HAL_RCC_OscConfig+0x470>)
 8001594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1ee      	bne.n	800157c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800159e:	7dfb      	ldrb	r3, [r7, #23]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d105      	bne.n	80015b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015a4:	4b39      	ldr	r3, [pc, #228]	@ (800168c <HAL_RCC_OscConfig+0x470>)
 80015a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a8:	4a38      	ldr	r2, [pc, #224]	@ (800168c <HAL_RCC_OscConfig+0x470>)
 80015aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 80a1 	beq.w	80016fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015ba:	4b34      	ldr	r3, [pc, #208]	@ (800168c <HAL_RCC_OscConfig+0x470>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 030c 	and.w	r3, r3, #12
 80015c2:	2b08      	cmp	r3, #8
 80015c4:	d05c      	beq.n	8001680 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d141      	bne.n	8001652 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ce:	4b31      	ldr	r3, [pc, #196]	@ (8001694 <HAL_RCC_OscConfig+0x478>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d4:	f7ff faee 	bl	8000bb4 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015dc:	f7ff faea 	bl	8000bb4 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e087      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ee:	4b27      	ldr	r3, [pc, #156]	@ (800168c <HAL_RCC_OscConfig+0x470>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1f0      	bne.n	80015dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69da      	ldr	r2, [r3, #28]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	431a      	orrs	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001608:	019b      	lsls	r3, r3, #6
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001610:	085b      	lsrs	r3, r3, #1
 8001612:	3b01      	subs	r3, #1
 8001614:	041b      	lsls	r3, r3, #16
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800161c:	061b      	lsls	r3, r3, #24
 800161e:	491b      	ldr	r1, [pc, #108]	@ (800168c <HAL_RCC_OscConfig+0x470>)
 8001620:	4313      	orrs	r3, r2
 8001622:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001624:	4b1b      	ldr	r3, [pc, #108]	@ (8001694 <HAL_RCC_OscConfig+0x478>)
 8001626:	2201      	movs	r2, #1
 8001628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162a:	f7ff fac3 	bl	8000bb4 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001632:	f7ff fabf 	bl	8000bb4 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e05c      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001644:	4b11      	ldr	r3, [pc, #68]	@ (800168c <HAL_RCC_OscConfig+0x470>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0f0      	beq.n	8001632 <HAL_RCC_OscConfig+0x416>
 8001650:	e054      	b.n	80016fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001652:	4b10      	ldr	r3, [pc, #64]	@ (8001694 <HAL_RCC_OscConfig+0x478>)
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001658:	f7ff faac 	bl	8000bb4 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001660:	f7ff faa8 	bl	8000bb4 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e045      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001672:	4b06      	ldr	r3, [pc, #24]	@ (800168c <HAL_RCC_OscConfig+0x470>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0x444>
 800167e:	e03d      	b.n	80016fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d107      	bne.n	8001698 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e038      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
 800168c:	40023800 	.word	0x40023800
 8001690:	40007000 	.word	0x40007000
 8001694:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001698:	4b1b      	ldr	r3, [pc, #108]	@ (8001708 <HAL_RCC_OscConfig+0x4ec>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d028      	beq.n	80016f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d121      	bne.n	80016f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016be:	429a      	cmp	r2, r3
 80016c0:	d11a      	bne.n	80016f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80016c8:	4013      	ands	r3, r2
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d111      	bne.n	80016f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016de:	085b      	lsrs	r3, r3, #1
 80016e0:	3b01      	subs	r3, #1
 80016e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d107      	bne.n	80016f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e000      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40023800 	.word	0x40023800

0800170c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e0cc      	b.n	80018ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001720:	4b68      	ldr	r3, [pc, #416]	@ (80018c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d90c      	bls.n	8001748 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172e:	4b65      	ldr	r3, [pc, #404]	@ (80018c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	b2d2      	uxtb	r2, r2
 8001734:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001736:	4b63      	ldr	r3, [pc, #396]	@ (80018c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	429a      	cmp	r2, r3
 8001742:	d001      	beq.n	8001748 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e0b8      	b.n	80018ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d020      	beq.n	8001796 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	2b00      	cmp	r3, #0
 800175e:	d005      	beq.n	800176c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001760:	4b59      	ldr	r3, [pc, #356]	@ (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	4a58      	ldr	r2, [pc, #352]	@ (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800176a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0308 	and.w	r3, r3, #8
 8001774:	2b00      	cmp	r3, #0
 8001776:	d005      	beq.n	8001784 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001778:	4b53      	ldr	r3, [pc, #332]	@ (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	4a52      	ldr	r2, [pc, #328]	@ (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001782:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001784:	4b50      	ldr	r3, [pc, #320]	@ (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	494d      	ldr	r1, [pc, #308]	@ (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	4313      	orrs	r3, r2
 8001794:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d044      	beq.n	800182c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d107      	bne.n	80017ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017aa:	4b47      	ldr	r3, [pc, #284]	@ (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d119      	bne.n	80017ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e07f      	b.n	80018ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d003      	beq.n	80017ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017c6:	2b03      	cmp	r3, #3
 80017c8:	d107      	bne.n	80017da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ca:	4b3f      	ldr	r3, [pc, #252]	@ (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d109      	bne.n	80017ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e06f      	b.n	80018ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017da:	4b3b      	ldr	r3, [pc, #236]	@ (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e067      	b.n	80018ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ea:	4b37      	ldr	r3, [pc, #220]	@ (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f023 0203 	bic.w	r2, r3, #3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	4934      	ldr	r1, [pc, #208]	@ (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017fc:	f7ff f9da 	bl	8000bb4 <HAL_GetTick>
 8001800:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001802:	e00a      	b.n	800181a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001804:	f7ff f9d6 	bl	8000bb4 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001812:	4293      	cmp	r3, r2
 8001814:	d901      	bls.n	800181a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e04f      	b.n	80018ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181a:	4b2b      	ldr	r3, [pc, #172]	@ (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 020c 	and.w	r2, r3, #12
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	429a      	cmp	r2, r3
 800182a:	d1eb      	bne.n	8001804 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800182c:	4b25      	ldr	r3, [pc, #148]	@ (80018c4 <HAL_RCC_ClockConfig+0x1b8>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	d20c      	bcs.n	8001854 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183a:	4b22      	ldr	r3, [pc, #136]	@ (80018c4 <HAL_RCC_ClockConfig+0x1b8>)
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001842:	4b20      	ldr	r3, [pc, #128]	@ (80018c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	429a      	cmp	r2, r3
 800184e:	d001      	beq.n	8001854 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e032      	b.n	80018ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	2b00      	cmp	r3, #0
 800185e:	d008      	beq.n	8001872 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001860:	4b19      	ldr	r3, [pc, #100]	@ (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	4916      	ldr	r1, [pc, #88]	@ (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	4313      	orrs	r3, r2
 8001870:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0308 	and.w	r3, r3, #8
 800187a:	2b00      	cmp	r3, #0
 800187c:	d009      	beq.n	8001892 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800187e:	4b12      	ldr	r3, [pc, #72]	@ (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	490e      	ldr	r1, [pc, #56]	@ (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	4313      	orrs	r3, r2
 8001890:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001892:	f000 f821 	bl	80018d8 <HAL_RCC_GetSysClockFreq>
 8001896:	4602      	mov	r2, r0
 8001898:	4b0b      	ldr	r3, [pc, #44]	@ (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	091b      	lsrs	r3, r3, #4
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	490a      	ldr	r1, [pc, #40]	@ (80018cc <HAL_RCC_ClockConfig+0x1c0>)
 80018a4:	5ccb      	ldrb	r3, [r1, r3]
 80018a6:	fa22 f303 	lsr.w	r3, r2, r3
 80018aa:	4a09      	ldr	r2, [pc, #36]	@ (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 80018ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80018ae:	4b09      	ldr	r3, [pc, #36]	@ (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff f93a 	bl	8000b2c <HAL_InitTick>

  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40023c00 	.word	0x40023c00
 80018c8:	40023800 	.word	0x40023800
 80018cc:	08003520 	.word	0x08003520
 80018d0:	20000000 	.word	0x20000000
 80018d4:	20000004 	.word	0x20000004

080018d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018dc:	b090      	sub	sp, #64	@ 0x40
 80018de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018f0:	4b59      	ldr	r3, [pc, #356]	@ (8001a58 <HAL_RCC_GetSysClockFreq+0x180>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 030c 	and.w	r3, r3, #12
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d00d      	beq.n	8001918 <HAL_RCC_GetSysClockFreq+0x40>
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	f200 80a1 	bhi.w	8001a44 <HAL_RCC_GetSysClockFreq+0x16c>
 8001902:	2b00      	cmp	r3, #0
 8001904:	d002      	beq.n	800190c <HAL_RCC_GetSysClockFreq+0x34>
 8001906:	2b04      	cmp	r3, #4
 8001908:	d003      	beq.n	8001912 <HAL_RCC_GetSysClockFreq+0x3a>
 800190a:	e09b      	b.n	8001a44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800190c:	4b53      	ldr	r3, [pc, #332]	@ (8001a5c <HAL_RCC_GetSysClockFreq+0x184>)
 800190e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001910:	e09b      	b.n	8001a4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001912:	4b53      	ldr	r3, [pc, #332]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x188>)
 8001914:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001916:	e098      	b.n	8001a4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001918:	4b4f      	ldr	r3, [pc, #316]	@ (8001a58 <HAL_RCC_GetSysClockFreq+0x180>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001920:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001922:	4b4d      	ldr	r3, [pc, #308]	@ (8001a58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d028      	beq.n	8001980 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800192e:	4b4a      	ldr	r3, [pc, #296]	@ (8001a58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	099b      	lsrs	r3, r3, #6
 8001934:	2200      	movs	r2, #0
 8001936:	623b      	str	r3, [r7, #32]
 8001938:	627a      	str	r2, [r7, #36]	@ 0x24
 800193a:	6a3b      	ldr	r3, [r7, #32]
 800193c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001940:	2100      	movs	r1, #0
 8001942:	4b47      	ldr	r3, [pc, #284]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x188>)
 8001944:	fb03 f201 	mul.w	r2, r3, r1
 8001948:	2300      	movs	r3, #0
 800194a:	fb00 f303 	mul.w	r3, r0, r3
 800194e:	4413      	add	r3, r2
 8001950:	4a43      	ldr	r2, [pc, #268]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x188>)
 8001952:	fba0 1202 	umull	r1, r2, r0, r2
 8001956:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001958:	460a      	mov	r2, r1
 800195a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800195c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800195e:	4413      	add	r3, r2
 8001960:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001964:	2200      	movs	r2, #0
 8001966:	61bb      	str	r3, [r7, #24]
 8001968:	61fa      	str	r2, [r7, #28]
 800196a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800196e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001972:	f7fe fc31 	bl	80001d8 <__aeabi_uldivmod>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4613      	mov	r3, r2
 800197c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800197e:	e053      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001980:	4b35      	ldr	r3, [pc, #212]	@ (8001a58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	099b      	lsrs	r3, r3, #6
 8001986:	2200      	movs	r2, #0
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	617a      	str	r2, [r7, #20]
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001992:	f04f 0b00 	mov.w	fp, #0
 8001996:	4652      	mov	r2, sl
 8001998:	465b      	mov	r3, fp
 800199a:	f04f 0000 	mov.w	r0, #0
 800199e:	f04f 0100 	mov.w	r1, #0
 80019a2:	0159      	lsls	r1, r3, #5
 80019a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019a8:	0150      	lsls	r0, r2, #5
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	ebb2 080a 	subs.w	r8, r2, sl
 80019b2:	eb63 090b 	sbc.w	r9, r3, fp
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80019c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80019c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80019ca:	ebb2 0408 	subs.w	r4, r2, r8
 80019ce:	eb63 0509 	sbc.w	r5, r3, r9
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	00eb      	lsls	r3, r5, #3
 80019dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019e0:	00e2      	lsls	r2, r4, #3
 80019e2:	4614      	mov	r4, r2
 80019e4:	461d      	mov	r5, r3
 80019e6:	eb14 030a 	adds.w	r3, r4, sl
 80019ea:	603b      	str	r3, [r7, #0]
 80019ec:	eb45 030b 	adc.w	r3, r5, fp
 80019f0:	607b      	str	r3, [r7, #4]
 80019f2:	f04f 0200 	mov.w	r2, #0
 80019f6:	f04f 0300 	mov.w	r3, #0
 80019fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019fe:	4629      	mov	r1, r5
 8001a00:	028b      	lsls	r3, r1, #10
 8001a02:	4621      	mov	r1, r4
 8001a04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a08:	4621      	mov	r1, r4
 8001a0a:	028a      	lsls	r2, r1, #10
 8001a0c:	4610      	mov	r0, r2
 8001a0e:	4619      	mov	r1, r3
 8001a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a12:	2200      	movs	r2, #0
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	60fa      	str	r2, [r7, #12]
 8001a18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a1c:	f7fe fbdc 	bl	80001d8 <__aeabi_uldivmod>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4613      	mov	r3, r2
 8001a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a28:	4b0b      	ldr	r3, [pc, #44]	@ (8001a58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	0c1b      	lsrs	r3, r3, #16
 8001a2e:	f003 0303 	and.w	r3, r3, #3
 8001a32:	3301      	adds	r3, #1
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001a38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a40:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a42:	e002      	b.n	8001a4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a44:	4b05      	ldr	r3, [pc, #20]	@ (8001a5c <HAL_RCC_GetSysClockFreq+0x184>)
 8001a46:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3740      	adds	r7, #64	@ 0x40
 8001a50:	46bd      	mov	sp, r7
 8001a52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a56:	bf00      	nop
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	00f42400 	.word	0x00f42400
 8001a60:	017d7840 	.word	0x017d7840

08001a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a68:	4b03      	ldr	r3, [pc, #12]	@ (8001a78 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	20000000 	.word	0x20000000

08001a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a80:	f7ff fff0 	bl	8001a64 <HAL_RCC_GetHCLKFreq>
 8001a84:	4602      	mov	r2, r0
 8001a86:	4b05      	ldr	r3, [pc, #20]	@ (8001a9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	0a9b      	lsrs	r3, r3, #10
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	4903      	ldr	r1, [pc, #12]	@ (8001aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a92:	5ccb      	ldrb	r3, [r1, r3]
 8001a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	08003530 	.word	0x08003530

08001aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001aa8:	f7ff ffdc 	bl	8001a64 <HAL_RCC_GetHCLKFreq>
 8001aac:	4602      	mov	r2, r0
 8001aae:	4b05      	ldr	r3, [pc, #20]	@ (8001ac4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	0b5b      	lsrs	r3, r3, #13
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	4903      	ldr	r1, [pc, #12]	@ (8001ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aba:	5ccb      	ldrb	r3, [r1, r3]
 8001abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	08003530 	.word	0x08003530

08001acc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e042      	b.n	8001b64 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d106      	bne.n	8001af8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7fe fe0e 	bl	8000714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2224      	movs	r2, #36	@ 0x24
 8001afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68da      	ldr	r2, [r3, #12]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 fdbd 	bl	8002690 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	691a      	ldr	r2, [r3, #16]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001b24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	695a      	ldr	r2, [r3, #20]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001b34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68da      	ldr	r2, [r3, #12]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001b44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2220      	movs	r2, #32
 8001b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2220      	movs	r2, #32
 8001b58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	@ 0x28
 8001b70:	af02      	add	r7, sp, #8
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	603b      	str	r3, [r7, #0]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b20      	cmp	r3, #32
 8001b8a:	d175      	bne.n	8001c78 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d002      	beq.n	8001b98 <HAL_UART_Transmit+0x2c>
 8001b92:	88fb      	ldrh	r3, [r7, #6]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e06e      	b.n	8001c7a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2221      	movs	r2, #33	@ 0x21
 8001ba6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001baa:	f7ff f803 	bl	8000bb4 <HAL_GetTick>
 8001bae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	88fa      	ldrh	r2, [r7, #6]
 8001bb4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	88fa      	ldrh	r2, [r7, #6]
 8001bba:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bc4:	d108      	bne.n	8001bd8 <HAL_UART_Transmit+0x6c>
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d104      	bne.n	8001bd8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	61bb      	str	r3, [r7, #24]
 8001bd6:	e003      	b.n	8001be0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001be0:	e02e      	b.n	8001c40 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	2200      	movs	r2, #0
 8001bea:	2180      	movs	r1, #128	@ 0x80
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f000 fb1f 	bl	8002230 <UART_WaitOnFlagUntilTimeout>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d005      	beq.n	8001c04 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e03a      	b.n	8001c7a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10b      	bne.n	8001c22 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	881b      	ldrh	r3, [r3, #0]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	3302      	adds	r3, #2
 8001c1e:	61bb      	str	r3, [r7, #24]
 8001c20:	e007      	b.n	8001c32 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	781a      	ldrb	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1cb      	bne.n	8001be2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	2200      	movs	r2, #0
 8001c52:	2140      	movs	r1, #64	@ 0x40
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f000 faeb 	bl	8002230 <UART_WaitOnFlagUntilTimeout>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2220      	movs	r2, #32
 8001c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e006      	b.n	8001c7a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2220      	movs	r2, #32
 8001c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001c74:	2300      	movs	r3, #0
 8001c76:	e000      	b.n	8001c7a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001c78:	2302      	movs	r3, #2
  }
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3720      	adds	r7, #32
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b084      	sub	sp, #16
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	60f8      	str	r0, [r7, #12]
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b20      	cmp	r3, #32
 8001c9a:	d112      	bne.n	8001cc2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <HAL_UART_Receive_IT+0x26>
 8001ca2:	88fb      	ldrh	r3, [r7, #6]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e00b      	b.n	8001cc4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001cb2:	88fb      	ldrh	r3, [r7, #6]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	68b9      	ldr	r1, [r7, #8]
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f000 fb12 	bl	80022e2 <UART_Start_Receive_IT>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	e000      	b.n	8001cc4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001cc2:	2302      	movs	r3, #2
  }
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b0ba      	sub	sp, #232	@ 0xe8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001d0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10f      	bne.n	8001d32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d16:	f003 0320 	and.w	r3, r3, #32
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d009      	beq.n	8001d32 <HAL_UART_IRQHandler+0x66>
 8001d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d22:	f003 0320 	and.w	r3, r3, #32
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 fbf2 	bl	8002514 <UART_Receive_IT>
      return;
 8001d30:	e25b      	b.n	80021ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001d32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f000 80de 	beq.w	8001ef8 <HAL_UART_IRQHandler+0x22c>
 8001d3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d106      	bne.n	8001d56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d4c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 80d1 	beq.w	8001ef8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00b      	beq.n	8001d7a <HAL_UART_IRQHandler+0xae>
 8001d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d005      	beq.n	8001d7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d72:	f043 0201 	orr.w	r2, r3, #1
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d7e:	f003 0304 	and.w	r3, r3, #4
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00b      	beq.n	8001d9e <HAL_UART_IRQHandler+0xd2>
 8001d86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d005      	beq.n	8001d9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d96:	f043 0202 	orr.w	r2, r3, #2
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00b      	beq.n	8001dc2 <HAL_UART_IRQHandler+0xf6>
 8001daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d005      	beq.n	8001dc2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dba:	f043 0204 	orr.w	r2, r3, #4
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d011      	beq.n	8001df2 <HAL_UART_IRQHandler+0x126>
 8001dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001dd2:	f003 0320 	and.w	r3, r3, #32
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d105      	bne.n	8001de6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001dda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d005      	beq.n	8001df2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dea:	f043 0208 	orr.w	r2, r3, #8
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 81f2 	beq.w	80021e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e00:	f003 0320 	and.w	r3, r3, #32
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d008      	beq.n	8001e1a <HAL_UART_IRQHandler+0x14e>
 8001e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e0c:	f003 0320 	and.w	r3, r3, #32
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d002      	beq.n	8001e1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 fb7d 	bl	8002514 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e24:	2b40      	cmp	r3, #64	@ 0x40
 8001e26:	bf0c      	ite	eq
 8001e28:	2301      	moveq	r3, #1
 8001e2a:	2300      	movne	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d103      	bne.n	8001e46 <HAL_UART_IRQHandler+0x17a>
 8001e3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d04f      	beq.n	8001ee6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 fa85 	bl	8002356 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e56:	2b40      	cmp	r3, #64	@ 0x40
 8001e58:	d141      	bne.n	8001ede <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	3314      	adds	r3, #20
 8001e60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e64:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001e68:	e853 3f00 	ldrex	r3, [r3]
 8001e6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001e70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001e78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	3314      	adds	r3, #20
 8001e82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001e86:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001e8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001e92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001e96:	e841 2300 	strex	r3, r2, [r1]
 8001e9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001e9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1d9      	bne.n	8001e5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d013      	beq.n	8001ed6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eb2:	4a7e      	ldr	r2, [pc, #504]	@ (80020ac <HAL_UART_IRQHandler+0x3e0>)
 8001eb4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff f807 	bl	8000ece <HAL_DMA_Abort_IT>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d016      	beq.n	8001ef4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001ed0:	4610      	mov	r0, r2
 8001ed2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ed4:	e00e      	b.n	8001ef4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f994 	bl	8002204 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001edc:	e00a      	b.n	8001ef4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f990 	bl	8002204 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ee4:	e006      	b.n	8001ef4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f98c 	bl	8002204 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001ef2:	e175      	b.n	80021e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ef4:	bf00      	nop
    return;
 8001ef6:	e173      	b.n	80021e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	f040 814f 	bne.w	80021a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f06:	f003 0310 	and.w	r3, r3, #16
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 8148 	beq.w	80021a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f14:	f003 0310 	and.w	r3, r3, #16
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 8141 	beq.w	80021a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f3e:	2b40      	cmp	r3, #64	@ 0x40
 8001f40:	f040 80b6 	bne.w	80020b0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001f50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 8145 	beq.w	80021e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001f5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001f62:	429a      	cmp	r2, r3
 8001f64:	f080 813e 	bcs.w	80021e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001f6e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f7a:	f000 8088 	beq.w	800208e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	330c      	adds	r3, #12
 8001f84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f8c:	e853 3f00 	ldrex	r3, [r3]
 8001f90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8001f94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	330c      	adds	r3, #12
 8001fa6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001faa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001fae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001fb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001fba:	e841 2300 	strex	r3, r2, [r1]
 8001fbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8001fc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1d9      	bne.n	8001f7e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	3314      	adds	r3, #20
 8001fd0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fd4:	e853 3f00 	ldrex	r3, [r3]
 8001fd8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8001fda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001fdc:	f023 0301 	bic.w	r3, r3, #1
 8001fe0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	3314      	adds	r3, #20
 8001fea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001fee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001ff2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ff4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001ff6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001ffa:	e841 2300 	strex	r3, r2, [r1]
 8001ffe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002000:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1e1      	bne.n	8001fca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	3314      	adds	r3, #20
 800200c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800200e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002010:	e853 3f00 	ldrex	r3, [r3]
 8002014:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002016:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002018:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800201c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	3314      	adds	r3, #20
 8002026:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800202a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800202c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800202e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002030:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002032:	e841 2300 	strex	r3, r2, [r1]
 8002036:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002038:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1e3      	bne.n	8002006 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2220      	movs	r2, #32
 8002042:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	330c      	adds	r3, #12
 8002052:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002054:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002056:	e853 3f00 	ldrex	r3, [r3]
 800205a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800205c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800205e:	f023 0310 	bic.w	r3, r3, #16
 8002062:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	330c      	adds	r3, #12
 800206c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002070:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002072:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002074:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002076:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002078:	e841 2300 	strex	r3, r2, [r1]
 800207c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800207e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1e3      	bne.n	800204c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe feb0 	bl	8000dee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2202      	movs	r2, #2
 8002092:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800209c:	b29b      	uxth	r3, r3
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	4619      	mov	r1, r3
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 f8b7 	bl	8002218 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80020aa:	e09b      	b.n	80021e4 <HAL_UART_IRQHandler+0x518>
 80020ac:	0800241d 	.word	0x0800241d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 808e 	beq.w	80021e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80020cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 8089 	beq.w	80021e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	330c      	adds	r3, #12
 80020dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020e0:	e853 3f00 	ldrex	r3, [r3]
 80020e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80020e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80020ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	330c      	adds	r3, #12
 80020f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80020fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80020fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002100:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002102:	e841 2300 	strex	r3, r2, [r1]
 8002106:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1e3      	bne.n	80020d6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	3314      	adds	r3, #20
 8002114:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002118:	e853 3f00 	ldrex	r3, [r3]
 800211c:	623b      	str	r3, [r7, #32]
   return(result);
 800211e:	6a3b      	ldr	r3, [r7, #32]
 8002120:	f023 0301 	bic.w	r3, r3, #1
 8002124:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	3314      	adds	r3, #20
 800212e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002132:	633a      	str	r2, [r7, #48]	@ 0x30
 8002134:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002136:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002138:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800213a:	e841 2300 	strex	r3, r2, [r1]
 800213e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1e3      	bne.n	800210e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2220      	movs	r2, #32
 800214a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	330c      	adds	r3, #12
 800215a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	e853 3f00 	ldrex	r3, [r3]
 8002162:	60fb      	str	r3, [r7, #12]
   return(result);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f023 0310 	bic.w	r3, r3, #16
 800216a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	330c      	adds	r3, #12
 8002174:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002178:	61fa      	str	r2, [r7, #28]
 800217a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800217c:	69b9      	ldr	r1, [r7, #24]
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	e841 2300 	strex	r3, r2, [r1]
 8002184:	617b      	str	r3, [r7, #20]
   return(result);
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1e3      	bne.n	8002154 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2202      	movs	r2, #2
 8002190:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002192:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002196:	4619      	mov	r1, r3
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f83d 	bl	8002218 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800219e:	e023      	b.n	80021e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80021a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d009      	beq.n	80021c0 <HAL_UART_IRQHandler+0x4f4>
 80021ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f943 	bl	8002444 <UART_Transmit_IT>
    return;
 80021be:	e014      	b.n	80021ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80021c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00e      	beq.n	80021ea <HAL_UART_IRQHandler+0x51e>
 80021cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d008      	beq.n	80021ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f983 	bl	80024e4 <UART_EndTransmit_IT>
    return;
 80021de:	e004      	b.n	80021ea <HAL_UART_IRQHandler+0x51e>
    return;
 80021e0:	bf00      	nop
 80021e2:	e002      	b.n	80021ea <HAL_UART_IRQHandler+0x51e>
      return;
 80021e4:	bf00      	nop
 80021e6:	e000      	b.n	80021ea <HAL_UART_IRQHandler+0x51e>
      return;
 80021e8:	bf00      	nop
  }
}
 80021ea:	37e8      	adds	r7, #232	@ 0xe8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	603b      	str	r3, [r7, #0]
 800223c:	4613      	mov	r3, r2
 800223e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002240:	e03b      	b.n	80022ba <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002248:	d037      	beq.n	80022ba <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800224a:	f7fe fcb3 	bl	8000bb4 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	6a3a      	ldr	r2, [r7, #32]
 8002256:	429a      	cmp	r2, r3
 8002258:	d302      	bcc.n	8002260 <UART_WaitOnFlagUntilTimeout+0x30>
 800225a:	6a3b      	ldr	r3, [r7, #32]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e03a      	b.n	80022da <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	f003 0304 	and.w	r3, r3, #4
 800226e:	2b00      	cmp	r3, #0
 8002270:	d023      	beq.n	80022ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	2b80      	cmp	r3, #128	@ 0x80
 8002276:	d020      	beq.n	80022ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2b40      	cmp	r3, #64	@ 0x40
 800227c:	d01d      	beq.n	80022ba <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0308 	and.w	r3, r3, #8
 8002288:	2b08      	cmp	r3, #8
 800228a:	d116      	bne.n	80022ba <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	617b      	str	r3, [r7, #20]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 f857 	bl	8002356 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2208      	movs	r2, #8
 80022ac:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e00f      	b.n	80022da <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	4013      	ands	r3, r2
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	bf0c      	ite	eq
 80022ca:	2301      	moveq	r3, #1
 80022cc:	2300      	movne	r3, #0
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	461a      	mov	r2, r3
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d0b4      	beq.n	8002242 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b085      	sub	sp, #20
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	60f8      	str	r0, [r7, #12]
 80022ea:	60b9      	str	r1, [r7, #8]
 80022ec:	4613      	mov	r3, r2
 80022ee:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	88fa      	ldrh	r2, [r7, #6]
 80022fa:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	88fa      	ldrh	r2, [r7, #6]
 8002300:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2222      	movs	r2, #34	@ 0x22
 800230c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d007      	beq.n	8002328 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68da      	ldr	r2, [r3, #12]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002326:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	695a      	ldr	r2, [r3, #20]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0201 	orr.w	r2, r2, #1
 8002336:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0220 	orr.w	r2, r2, #32
 8002346:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002356:	b480      	push	{r7}
 8002358:	b095      	sub	sp, #84	@ 0x54
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	330c      	adds	r3, #12
 8002364:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002368:	e853 3f00 	ldrex	r3, [r3]
 800236c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800236e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002370:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002374:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	330c      	adds	r3, #12
 800237c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800237e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002380:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002382:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002384:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002386:	e841 2300 	strex	r3, r2, [r1]
 800238a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800238c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1e5      	bne.n	800235e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	3314      	adds	r3, #20
 8002398:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	e853 3f00 	ldrex	r3, [r3]
 80023a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	f023 0301 	bic.w	r3, r3, #1
 80023a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	3314      	adds	r3, #20
 80023b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80023b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80023b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023ba:	e841 2300 	strex	r3, r2, [r1]
 80023be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80023c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1e5      	bne.n	8002392 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d119      	bne.n	8002402 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	330c      	adds	r3, #12
 80023d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	e853 3f00 	ldrex	r3, [r3]
 80023dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	f023 0310 	bic.w	r3, r3, #16
 80023e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	330c      	adds	r3, #12
 80023ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80023ee:	61ba      	str	r2, [r7, #24]
 80023f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023f2:	6979      	ldr	r1, [r7, #20]
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	e841 2300 	strex	r3, r2, [r1]
 80023fa:	613b      	str	r3, [r7, #16]
   return(result);
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1e5      	bne.n	80023ce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2220      	movs	r2, #32
 8002406:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002410:	bf00      	nop
 8002412:	3754      	adds	r7, #84	@ 0x54
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002428:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f7ff fee4 	bl	8002204 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800243c:	bf00      	nop
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b21      	cmp	r3, #33	@ 0x21
 8002456:	d13e      	bne.n	80024d6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002460:	d114      	bne.n	800248c <UART_Transmit_IT+0x48>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d110      	bne.n	800248c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	461a      	mov	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800247e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	1c9a      	adds	r2, r3, #2
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	621a      	str	r2, [r3, #32]
 800248a:	e008      	b.n	800249e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	1c59      	adds	r1, r3, #1
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6211      	str	r1, [r2, #32]
 8002496:	781a      	ldrb	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	4619      	mov	r1, r3
 80024ac:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10f      	bne.n	80024d2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80024d2:	2300      	movs	r3, #0
 80024d4:	e000      	b.n	80024d8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80024d6:	2302      	movs	r3, #2
  }
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68da      	ldr	r2, [r3, #12]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024fa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2220      	movs	r2, #32
 8002500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7ff fe73 	bl	80021f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08c      	sub	sp, #48	@ 0x30
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b22      	cmp	r3, #34	@ 0x22
 8002526:	f040 80ae 	bne.w	8002686 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002532:	d117      	bne.n	8002564 <UART_Receive_IT+0x50>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d113      	bne.n	8002564 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800253c:	2300      	movs	r3, #0
 800253e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002544:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	b29b      	uxth	r3, r3
 800254e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002552:	b29a      	uxth	r2, r3
 8002554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002556:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255c:	1c9a      	adds	r2, r3, #2
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	629a      	str	r2, [r3, #40]	@ 0x28
 8002562:	e026      	b.n	80025b2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002568:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800256a:	2300      	movs	r3, #0
 800256c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002576:	d007      	beq.n	8002588 <UART_Receive_IT+0x74>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10a      	bne.n	8002596 <UART_Receive_IT+0x82>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d106      	bne.n	8002596 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	b2da      	uxtb	r2, r3
 8002590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002592:	701a      	strb	r2, [r3, #0]
 8002594:	e008      	b.n	80025a8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025a6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ac:	1c5a      	adds	r2, r3, #1
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	4619      	mov	r1, r3
 80025c0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d15d      	bne.n	8002682 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 0220 	bic.w	r2, r2, #32
 80025d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68da      	ldr	r2, [r3, #12]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	695a      	ldr	r2, [r3, #20]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 0201 	bic.w	r2, r2, #1
 80025f4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2220      	movs	r2, #32
 80025fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002608:	2b01      	cmp	r3, #1
 800260a:	d135      	bne.n	8002678 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	330c      	adds	r3, #12
 8002618:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	e853 3f00 	ldrex	r3, [r3]
 8002620:	613b      	str	r3, [r7, #16]
   return(result);
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	f023 0310 	bic.w	r3, r3, #16
 8002628:	627b      	str	r3, [r7, #36]	@ 0x24
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	330c      	adds	r3, #12
 8002630:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002632:	623a      	str	r2, [r7, #32]
 8002634:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002636:	69f9      	ldr	r1, [r7, #28]
 8002638:	6a3a      	ldr	r2, [r7, #32]
 800263a:	e841 2300 	strex	r3, r2, [r1]
 800263e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1e5      	bne.n	8002612 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0310 	and.w	r3, r3, #16
 8002650:	2b10      	cmp	r3, #16
 8002652:	d10a      	bne.n	800266a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002654:	2300      	movs	r3, #0
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800266e:	4619      	mov	r1, r3
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7ff fdd1 	bl	8002218 <HAL_UARTEx_RxEventCallback>
 8002676:	e002      	b.n	800267e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7fe f9a7 	bl	80009cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800267e:	2300      	movs	r3, #0
 8002680:	e002      	b.n	8002688 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	e000      	b.n	8002688 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002686:	2302      	movs	r3, #2
  }
}
 8002688:	4618      	mov	r0, r3
 800268a:	3730      	adds	r7, #48	@ 0x30
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002694:	b0c0      	sub	sp, #256	@ 0x100
 8002696:	af00      	add	r7, sp, #0
 8002698:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800269c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80026a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ac:	68d9      	ldr	r1, [r3, #12]
 80026ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	ea40 0301 	orr.w	r3, r0, r1
 80026b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	431a      	orrs	r2, r3
 80026c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	431a      	orrs	r2, r3
 80026d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80026dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80026e8:	f021 010c 	bic.w	r1, r1, #12
 80026ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80026f6:	430b      	orrs	r3, r1
 80026f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800270a:	6999      	ldr	r1, [r3, #24]
 800270c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	ea40 0301 	orr.w	r3, r0, r1
 8002716:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	4b8f      	ldr	r3, [pc, #572]	@ (800295c <UART_SetConfig+0x2cc>)
 8002720:	429a      	cmp	r2, r3
 8002722:	d005      	beq.n	8002730 <UART_SetConfig+0xa0>
 8002724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	4b8d      	ldr	r3, [pc, #564]	@ (8002960 <UART_SetConfig+0x2d0>)
 800272c:	429a      	cmp	r2, r3
 800272e:	d104      	bne.n	800273a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002730:	f7ff f9b8 	bl	8001aa4 <HAL_RCC_GetPCLK2Freq>
 8002734:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002738:	e003      	b.n	8002742 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800273a:	f7ff f99f 	bl	8001a7c <HAL_RCC_GetPCLK1Freq>
 800273e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800274c:	f040 810c 	bne.w	8002968 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002750:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002754:	2200      	movs	r2, #0
 8002756:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800275a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800275e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002762:	4622      	mov	r2, r4
 8002764:	462b      	mov	r3, r5
 8002766:	1891      	adds	r1, r2, r2
 8002768:	65b9      	str	r1, [r7, #88]	@ 0x58
 800276a:	415b      	adcs	r3, r3
 800276c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800276e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002772:	4621      	mov	r1, r4
 8002774:	eb12 0801 	adds.w	r8, r2, r1
 8002778:	4629      	mov	r1, r5
 800277a:	eb43 0901 	adc.w	r9, r3, r1
 800277e:	f04f 0200 	mov.w	r2, #0
 8002782:	f04f 0300 	mov.w	r3, #0
 8002786:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800278a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800278e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002792:	4690      	mov	r8, r2
 8002794:	4699      	mov	r9, r3
 8002796:	4623      	mov	r3, r4
 8002798:	eb18 0303 	adds.w	r3, r8, r3
 800279c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80027a0:	462b      	mov	r3, r5
 80027a2:	eb49 0303 	adc.w	r3, r9, r3
 80027a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80027aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80027b6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80027ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80027be:	460b      	mov	r3, r1
 80027c0:	18db      	adds	r3, r3, r3
 80027c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80027c4:	4613      	mov	r3, r2
 80027c6:	eb42 0303 	adc.w	r3, r2, r3
 80027ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80027cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80027d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80027d4:	f7fd fd00 	bl	80001d8 <__aeabi_uldivmod>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4b61      	ldr	r3, [pc, #388]	@ (8002964 <UART_SetConfig+0x2d4>)
 80027de:	fba3 2302 	umull	r2, r3, r3, r2
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	011c      	lsls	r4, r3, #4
 80027e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027ea:	2200      	movs	r2, #0
 80027ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80027f0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80027f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80027f8:	4642      	mov	r2, r8
 80027fa:	464b      	mov	r3, r9
 80027fc:	1891      	adds	r1, r2, r2
 80027fe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002800:	415b      	adcs	r3, r3
 8002802:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002804:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002808:	4641      	mov	r1, r8
 800280a:	eb12 0a01 	adds.w	sl, r2, r1
 800280e:	4649      	mov	r1, r9
 8002810:	eb43 0b01 	adc.w	fp, r3, r1
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002820:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002824:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002828:	4692      	mov	sl, r2
 800282a:	469b      	mov	fp, r3
 800282c:	4643      	mov	r3, r8
 800282e:	eb1a 0303 	adds.w	r3, sl, r3
 8002832:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002836:	464b      	mov	r3, r9
 8002838:	eb4b 0303 	adc.w	r3, fp, r3
 800283c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800284c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002850:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002854:	460b      	mov	r3, r1
 8002856:	18db      	adds	r3, r3, r3
 8002858:	643b      	str	r3, [r7, #64]	@ 0x40
 800285a:	4613      	mov	r3, r2
 800285c:	eb42 0303 	adc.w	r3, r2, r3
 8002860:	647b      	str	r3, [r7, #68]	@ 0x44
 8002862:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002866:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800286a:	f7fd fcb5 	bl	80001d8 <__aeabi_uldivmod>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4611      	mov	r1, r2
 8002874:	4b3b      	ldr	r3, [pc, #236]	@ (8002964 <UART_SetConfig+0x2d4>)
 8002876:	fba3 2301 	umull	r2, r3, r3, r1
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	2264      	movs	r2, #100	@ 0x64
 800287e:	fb02 f303 	mul.w	r3, r2, r3
 8002882:	1acb      	subs	r3, r1, r3
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800288a:	4b36      	ldr	r3, [pc, #216]	@ (8002964 <UART_SetConfig+0x2d4>)
 800288c:	fba3 2302 	umull	r2, r3, r3, r2
 8002890:	095b      	lsrs	r3, r3, #5
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002898:	441c      	add	r4, r3
 800289a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800289e:	2200      	movs	r2, #0
 80028a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80028a4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80028a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80028ac:	4642      	mov	r2, r8
 80028ae:	464b      	mov	r3, r9
 80028b0:	1891      	adds	r1, r2, r2
 80028b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80028b4:	415b      	adcs	r3, r3
 80028b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80028bc:	4641      	mov	r1, r8
 80028be:	1851      	adds	r1, r2, r1
 80028c0:	6339      	str	r1, [r7, #48]	@ 0x30
 80028c2:	4649      	mov	r1, r9
 80028c4:	414b      	adcs	r3, r1
 80028c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	f04f 0300 	mov.w	r3, #0
 80028d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80028d4:	4659      	mov	r1, fp
 80028d6:	00cb      	lsls	r3, r1, #3
 80028d8:	4651      	mov	r1, sl
 80028da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028de:	4651      	mov	r1, sl
 80028e0:	00ca      	lsls	r2, r1, #3
 80028e2:	4610      	mov	r0, r2
 80028e4:	4619      	mov	r1, r3
 80028e6:	4603      	mov	r3, r0
 80028e8:	4642      	mov	r2, r8
 80028ea:	189b      	adds	r3, r3, r2
 80028ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80028f0:	464b      	mov	r3, r9
 80028f2:	460a      	mov	r2, r1
 80028f4:	eb42 0303 	adc.w	r3, r2, r3
 80028f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80028fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002908:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800290c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002910:	460b      	mov	r3, r1
 8002912:	18db      	adds	r3, r3, r3
 8002914:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002916:	4613      	mov	r3, r2
 8002918:	eb42 0303 	adc.w	r3, r2, r3
 800291c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800291e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002922:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002926:	f7fd fc57 	bl	80001d8 <__aeabi_uldivmod>
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	4b0d      	ldr	r3, [pc, #52]	@ (8002964 <UART_SetConfig+0x2d4>)
 8002930:	fba3 1302 	umull	r1, r3, r3, r2
 8002934:	095b      	lsrs	r3, r3, #5
 8002936:	2164      	movs	r1, #100	@ 0x64
 8002938:	fb01 f303 	mul.w	r3, r1, r3
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	3332      	adds	r3, #50	@ 0x32
 8002942:	4a08      	ldr	r2, [pc, #32]	@ (8002964 <UART_SetConfig+0x2d4>)
 8002944:	fba2 2303 	umull	r2, r3, r2, r3
 8002948:	095b      	lsrs	r3, r3, #5
 800294a:	f003 0207 	and.w	r2, r3, #7
 800294e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4422      	add	r2, r4
 8002956:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002958:	e106      	b.n	8002b68 <UART_SetConfig+0x4d8>
 800295a:	bf00      	nop
 800295c:	40011000 	.word	0x40011000
 8002960:	40011400 	.word	0x40011400
 8002964:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002968:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800296c:	2200      	movs	r2, #0
 800296e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002972:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002976:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800297a:	4642      	mov	r2, r8
 800297c:	464b      	mov	r3, r9
 800297e:	1891      	adds	r1, r2, r2
 8002980:	6239      	str	r1, [r7, #32]
 8002982:	415b      	adcs	r3, r3
 8002984:	627b      	str	r3, [r7, #36]	@ 0x24
 8002986:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800298a:	4641      	mov	r1, r8
 800298c:	1854      	adds	r4, r2, r1
 800298e:	4649      	mov	r1, r9
 8002990:	eb43 0501 	adc.w	r5, r3, r1
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	00eb      	lsls	r3, r5, #3
 800299e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029a2:	00e2      	lsls	r2, r4, #3
 80029a4:	4614      	mov	r4, r2
 80029a6:	461d      	mov	r5, r3
 80029a8:	4643      	mov	r3, r8
 80029aa:	18e3      	adds	r3, r4, r3
 80029ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80029b0:	464b      	mov	r3, r9
 80029b2:	eb45 0303 	adc.w	r3, r5, r3
 80029b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80029ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80029c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80029ca:	f04f 0200 	mov.w	r2, #0
 80029ce:	f04f 0300 	mov.w	r3, #0
 80029d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80029d6:	4629      	mov	r1, r5
 80029d8:	008b      	lsls	r3, r1, #2
 80029da:	4621      	mov	r1, r4
 80029dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029e0:	4621      	mov	r1, r4
 80029e2:	008a      	lsls	r2, r1, #2
 80029e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80029e8:	f7fd fbf6 	bl	80001d8 <__aeabi_uldivmod>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4b60      	ldr	r3, [pc, #384]	@ (8002b74 <UART_SetConfig+0x4e4>)
 80029f2:	fba3 2302 	umull	r2, r3, r3, r2
 80029f6:	095b      	lsrs	r3, r3, #5
 80029f8:	011c      	lsls	r4, r3, #4
 80029fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029fe:	2200      	movs	r2, #0
 8002a00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a04:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002a0c:	4642      	mov	r2, r8
 8002a0e:	464b      	mov	r3, r9
 8002a10:	1891      	adds	r1, r2, r2
 8002a12:	61b9      	str	r1, [r7, #24]
 8002a14:	415b      	adcs	r3, r3
 8002a16:	61fb      	str	r3, [r7, #28]
 8002a18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a1c:	4641      	mov	r1, r8
 8002a1e:	1851      	adds	r1, r2, r1
 8002a20:	6139      	str	r1, [r7, #16]
 8002a22:	4649      	mov	r1, r9
 8002a24:	414b      	adcs	r3, r1
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a34:	4659      	mov	r1, fp
 8002a36:	00cb      	lsls	r3, r1, #3
 8002a38:	4651      	mov	r1, sl
 8002a3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a3e:	4651      	mov	r1, sl
 8002a40:	00ca      	lsls	r2, r1, #3
 8002a42:	4610      	mov	r0, r2
 8002a44:	4619      	mov	r1, r3
 8002a46:	4603      	mov	r3, r0
 8002a48:	4642      	mov	r2, r8
 8002a4a:	189b      	adds	r3, r3, r2
 8002a4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a50:	464b      	mov	r3, r9
 8002a52:	460a      	mov	r2, r1
 8002a54:	eb42 0303 	adc.w	r3, r2, r3
 8002a58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002a66:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	f04f 0300 	mov.w	r3, #0
 8002a70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002a74:	4649      	mov	r1, r9
 8002a76:	008b      	lsls	r3, r1, #2
 8002a78:	4641      	mov	r1, r8
 8002a7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a7e:	4641      	mov	r1, r8
 8002a80:	008a      	lsls	r2, r1, #2
 8002a82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002a86:	f7fd fba7 	bl	80001d8 <__aeabi_uldivmod>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4611      	mov	r1, r2
 8002a90:	4b38      	ldr	r3, [pc, #224]	@ (8002b74 <UART_SetConfig+0x4e4>)
 8002a92:	fba3 2301 	umull	r2, r3, r3, r1
 8002a96:	095b      	lsrs	r3, r3, #5
 8002a98:	2264      	movs	r2, #100	@ 0x64
 8002a9a:	fb02 f303 	mul.w	r3, r2, r3
 8002a9e:	1acb      	subs	r3, r1, r3
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	3332      	adds	r3, #50	@ 0x32
 8002aa4:	4a33      	ldr	r2, [pc, #204]	@ (8002b74 <UART_SetConfig+0x4e4>)
 8002aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ab0:	441c      	add	r4, r3
 8002ab2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	673b      	str	r3, [r7, #112]	@ 0x70
 8002aba:	677a      	str	r2, [r7, #116]	@ 0x74
 8002abc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002ac0:	4642      	mov	r2, r8
 8002ac2:	464b      	mov	r3, r9
 8002ac4:	1891      	adds	r1, r2, r2
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	415b      	adcs	r3, r3
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	1851      	adds	r1, r2, r1
 8002ad4:	6039      	str	r1, [r7, #0]
 8002ad6:	4649      	mov	r1, r9
 8002ad8:	414b      	adcs	r3, r1
 8002ada:	607b      	str	r3, [r7, #4]
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	f04f 0300 	mov.w	r3, #0
 8002ae4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ae8:	4659      	mov	r1, fp
 8002aea:	00cb      	lsls	r3, r1, #3
 8002aec:	4651      	mov	r1, sl
 8002aee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002af2:	4651      	mov	r1, sl
 8002af4:	00ca      	lsls	r2, r1, #3
 8002af6:	4610      	mov	r0, r2
 8002af8:	4619      	mov	r1, r3
 8002afa:	4603      	mov	r3, r0
 8002afc:	4642      	mov	r2, r8
 8002afe:	189b      	adds	r3, r3, r2
 8002b00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b02:	464b      	mov	r3, r9
 8002b04:	460a      	mov	r2, r1
 8002b06:	eb42 0303 	adc.w	r3, r2, r3
 8002b0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b16:	667a      	str	r2, [r7, #100]	@ 0x64
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002b24:	4649      	mov	r1, r9
 8002b26:	008b      	lsls	r3, r1, #2
 8002b28:	4641      	mov	r1, r8
 8002b2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b2e:	4641      	mov	r1, r8
 8002b30:	008a      	lsls	r2, r1, #2
 8002b32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002b36:	f7fd fb4f 	bl	80001d8 <__aeabi_uldivmod>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b74 <UART_SetConfig+0x4e4>)
 8002b40:	fba3 1302 	umull	r1, r3, r3, r2
 8002b44:	095b      	lsrs	r3, r3, #5
 8002b46:	2164      	movs	r1, #100	@ 0x64
 8002b48:	fb01 f303 	mul.w	r3, r1, r3
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	3332      	adds	r3, #50	@ 0x32
 8002b52:	4a08      	ldr	r2, [pc, #32]	@ (8002b74 <UART_SetConfig+0x4e4>)
 8002b54:	fba2 2303 	umull	r2, r3, r2, r3
 8002b58:	095b      	lsrs	r3, r3, #5
 8002b5a:	f003 020f 	and.w	r2, r3, #15
 8002b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4422      	add	r2, r4
 8002b66:	609a      	str	r2, [r3, #8]
}
 8002b68:	bf00      	nop
 8002b6a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b74:	51eb851f 	.word	0x51eb851f

08002b78 <std>:
 8002b78:	2300      	movs	r3, #0
 8002b7a:	b510      	push	{r4, lr}
 8002b7c:	4604      	mov	r4, r0
 8002b7e:	e9c0 3300 	strd	r3, r3, [r0]
 8002b82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002b86:	6083      	str	r3, [r0, #8]
 8002b88:	8181      	strh	r1, [r0, #12]
 8002b8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8002b8c:	81c2      	strh	r2, [r0, #14]
 8002b8e:	6183      	str	r3, [r0, #24]
 8002b90:	4619      	mov	r1, r3
 8002b92:	2208      	movs	r2, #8
 8002b94:	305c      	adds	r0, #92	@ 0x5c
 8002b96:	f000 f9e7 	bl	8002f68 <memset>
 8002b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd0 <std+0x58>)
 8002b9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8002b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd4 <std+0x5c>)
 8002ba0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd8 <std+0x60>)
 8002ba4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8002bdc <std+0x64>)
 8002ba8:	6323      	str	r3, [r4, #48]	@ 0x30
 8002baa:	4b0d      	ldr	r3, [pc, #52]	@ (8002be0 <std+0x68>)
 8002bac:	6224      	str	r4, [r4, #32]
 8002bae:	429c      	cmp	r4, r3
 8002bb0:	d006      	beq.n	8002bc0 <std+0x48>
 8002bb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002bb6:	4294      	cmp	r4, r2
 8002bb8:	d002      	beq.n	8002bc0 <std+0x48>
 8002bba:	33d0      	adds	r3, #208	@ 0xd0
 8002bbc:	429c      	cmp	r4, r3
 8002bbe:	d105      	bne.n	8002bcc <std+0x54>
 8002bc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bc8:	f000 ba46 	b.w	8003058 <__retarget_lock_init_recursive>
 8002bcc:	bd10      	pop	{r4, pc}
 8002bce:	bf00      	nop
 8002bd0:	08002db9 	.word	0x08002db9
 8002bd4:	08002ddb 	.word	0x08002ddb
 8002bd8:	08002e13 	.word	0x08002e13
 8002bdc:	08002e37 	.word	0x08002e37
 8002be0:	200001ec 	.word	0x200001ec

08002be4 <stdio_exit_handler>:
 8002be4:	4a02      	ldr	r2, [pc, #8]	@ (8002bf0 <stdio_exit_handler+0xc>)
 8002be6:	4903      	ldr	r1, [pc, #12]	@ (8002bf4 <stdio_exit_handler+0x10>)
 8002be8:	4803      	ldr	r0, [pc, #12]	@ (8002bf8 <stdio_exit_handler+0x14>)
 8002bea:	f000 b869 	b.w	8002cc0 <_fwalk_sglue>
 8002bee:	bf00      	nop
 8002bf0:	2000000c 	.word	0x2000000c
 8002bf4:	08003359 	.word	0x08003359
 8002bf8:	2000001c 	.word	0x2000001c

08002bfc <cleanup_stdio>:
 8002bfc:	6841      	ldr	r1, [r0, #4]
 8002bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8002c30 <cleanup_stdio+0x34>)
 8002c00:	4299      	cmp	r1, r3
 8002c02:	b510      	push	{r4, lr}
 8002c04:	4604      	mov	r4, r0
 8002c06:	d001      	beq.n	8002c0c <cleanup_stdio+0x10>
 8002c08:	f000 fba6 	bl	8003358 <_fflush_r>
 8002c0c:	68a1      	ldr	r1, [r4, #8]
 8002c0e:	4b09      	ldr	r3, [pc, #36]	@ (8002c34 <cleanup_stdio+0x38>)
 8002c10:	4299      	cmp	r1, r3
 8002c12:	d002      	beq.n	8002c1a <cleanup_stdio+0x1e>
 8002c14:	4620      	mov	r0, r4
 8002c16:	f000 fb9f 	bl	8003358 <_fflush_r>
 8002c1a:	68e1      	ldr	r1, [r4, #12]
 8002c1c:	4b06      	ldr	r3, [pc, #24]	@ (8002c38 <cleanup_stdio+0x3c>)
 8002c1e:	4299      	cmp	r1, r3
 8002c20:	d004      	beq.n	8002c2c <cleanup_stdio+0x30>
 8002c22:	4620      	mov	r0, r4
 8002c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c28:	f000 bb96 	b.w	8003358 <_fflush_r>
 8002c2c:	bd10      	pop	{r4, pc}
 8002c2e:	bf00      	nop
 8002c30:	200001ec 	.word	0x200001ec
 8002c34:	20000254 	.word	0x20000254
 8002c38:	200002bc 	.word	0x200002bc

08002c3c <global_stdio_init.part.0>:
 8002c3c:	b510      	push	{r4, lr}
 8002c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c6c <global_stdio_init.part.0+0x30>)
 8002c40:	4c0b      	ldr	r4, [pc, #44]	@ (8002c70 <global_stdio_init.part.0+0x34>)
 8002c42:	4a0c      	ldr	r2, [pc, #48]	@ (8002c74 <global_stdio_init.part.0+0x38>)
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	4620      	mov	r0, r4
 8002c48:	2200      	movs	r2, #0
 8002c4a:	2104      	movs	r1, #4
 8002c4c:	f7ff ff94 	bl	8002b78 <std>
 8002c50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002c54:	2201      	movs	r2, #1
 8002c56:	2109      	movs	r1, #9
 8002c58:	f7ff ff8e 	bl	8002b78 <std>
 8002c5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002c60:	2202      	movs	r2, #2
 8002c62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c66:	2112      	movs	r1, #18
 8002c68:	f7ff bf86 	b.w	8002b78 <std>
 8002c6c:	20000324 	.word	0x20000324
 8002c70:	200001ec 	.word	0x200001ec
 8002c74:	08002be5 	.word	0x08002be5

08002c78 <__sfp_lock_acquire>:
 8002c78:	4801      	ldr	r0, [pc, #4]	@ (8002c80 <__sfp_lock_acquire+0x8>)
 8002c7a:	f000 b9ee 	b.w	800305a <__retarget_lock_acquire_recursive>
 8002c7e:	bf00      	nop
 8002c80:	2000032d 	.word	0x2000032d

08002c84 <__sfp_lock_release>:
 8002c84:	4801      	ldr	r0, [pc, #4]	@ (8002c8c <__sfp_lock_release+0x8>)
 8002c86:	f000 b9e9 	b.w	800305c <__retarget_lock_release_recursive>
 8002c8a:	bf00      	nop
 8002c8c:	2000032d 	.word	0x2000032d

08002c90 <__sinit>:
 8002c90:	b510      	push	{r4, lr}
 8002c92:	4604      	mov	r4, r0
 8002c94:	f7ff fff0 	bl	8002c78 <__sfp_lock_acquire>
 8002c98:	6a23      	ldr	r3, [r4, #32]
 8002c9a:	b11b      	cbz	r3, 8002ca4 <__sinit+0x14>
 8002c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ca0:	f7ff bff0 	b.w	8002c84 <__sfp_lock_release>
 8002ca4:	4b04      	ldr	r3, [pc, #16]	@ (8002cb8 <__sinit+0x28>)
 8002ca6:	6223      	str	r3, [r4, #32]
 8002ca8:	4b04      	ldr	r3, [pc, #16]	@ (8002cbc <__sinit+0x2c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1f5      	bne.n	8002c9c <__sinit+0xc>
 8002cb0:	f7ff ffc4 	bl	8002c3c <global_stdio_init.part.0>
 8002cb4:	e7f2      	b.n	8002c9c <__sinit+0xc>
 8002cb6:	bf00      	nop
 8002cb8:	08002bfd 	.word	0x08002bfd
 8002cbc:	20000324 	.word	0x20000324

08002cc0 <_fwalk_sglue>:
 8002cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cc4:	4607      	mov	r7, r0
 8002cc6:	4688      	mov	r8, r1
 8002cc8:	4614      	mov	r4, r2
 8002cca:	2600      	movs	r6, #0
 8002ccc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002cd0:	f1b9 0901 	subs.w	r9, r9, #1
 8002cd4:	d505      	bpl.n	8002ce2 <_fwalk_sglue+0x22>
 8002cd6:	6824      	ldr	r4, [r4, #0]
 8002cd8:	2c00      	cmp	r4, #0
 8002cda:	d1f7      	bne.n	8002ccc <_fwalk_sglue+0xc>
 8002cdc:	4630      	mov	r0, r6
 8002cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ce2:	89ab      	ldrh	r3, [r5, #12]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d907      	bls.n	8002cf8 <_fwalk_sglue+0x38>
 8002ce8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002cec:	3301      	adds	r3, #1
 8002cee:	d003      	beq.n	8002cf8 <_fwalk_sglue+0x38>
 8002cf0:	4629      	mov	r1, r5
 8002cf2:	4638      	mov	r0, r7
 8002cf4:	47c0      	blx	r8
 8002cf6:	4306      	orrs	r6, r0
 8002cf8:	3568      	adds	r5, #104	@ 0x68
 8002cfa:	e7e9      	b.n	8002cd0 <_fwalk_sglue+0x10>

08002cfc <_puts_r>:
 8002cfc:	6a03      	ldr	r3, [r0, #32]
 8002cfe:	b570      	push	{r4, r5, r6, lr}
 8002d00:	6884      	ldr	r4, [r0, #8]
 8002d02:	4605      	mov	r5, r0
 8002d04:	460e      	mov	r6, r1
 8002d06:	b90b      	cbnz	r3, 8002d0c <_puts_r+0x10>
 8002d08:	f7ff ffc2 	bl	8002c90 <__sinit>
 8002d0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002d0e:	07db      	lsls	r3, r3, #31
 8002d10:	d405      	bmi.n	8002d1e <_puts_r+0x22>
 8002d12:	89a3      	ldrh	r3, [r4, #12]
 8002d14:	0598      	lsls	r0, r3, #22
 8002d16:	d402      	bmi.n	8002d1e <_puts_r+0x22>
 8002d18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d1a:	f000 f99e 	bl	800305a <__retarget_lock_acquire_recursive>
 8002d1e:	89a3      	ldrh	r3, [r4, #12]
 8002d20:	0719      	lsls	r1, r3, #28
 8002d22:	d502      	bpl.n	8002d2a <_puts_r+0x2e>
 8002d24:	6923      	ldr	r3, [r4, #16]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d135      	bne.n	8002d96 <_puts_r+0x9a>
 8002d2a:	4621      	mov	r1, r4
 8002d2c:	4628      	mov	r0, r5
 8002d2e:	f000 f8c5 	bl	8002ebc <__swsetup_r>
 8002d32:	b380      	cbz	r0, 8002d96 <_puts_r+0x9a>
 8002d34:	f04f 35ff 	mov.w	r5, #4294967295
 8002d38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002d3a:	07da      	lsls	r2, r3, #31
 8002d3c:	d405      	bmi.n	8002d4a <_puts_r+0x4e>
 8002d3e:	89a3      	ldrh	r3, [r4, #12]
 8002d40:	059b      	lsls	r3, r3, #22
 8002d42:	d402      	bmi.n	8002d4a <_puts_r+0x4e>
 8002d44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d46:	f000 f989 	bl	800305c <__retarget_lock_release_recursive>
 8002d4a:	4628      	mov	r0, r5
 8002d4c:	bd70      	pop	{r4, r5, r6, pc}
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	da04      	bge.n	8002d5c <_puts_r+0x60>
 8002d52:	69a2      	ldr	r2, [r4, #24]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	dc17      	bgt.n	8002d88 <_puts_r+0x8c>
 8002d58:	290a      	cmp	r1, #10
 8002d5a:	d015      	beq.n	8002d88 <_puts_r+0x8c>
 8002d5c:	6823      	ldr	r3, [r4, #0]
 8002d5e:	1c5a      	adds	r2, r3, #1
 8002d60:	6022      	str	r2, [r4, #0]
 8002d62:	7019      	strb	r1, [r3, #0]
 8002d64:	68a3      	ldr	r3, [r4, #8]
 8002d66:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	60a3      	str	r3, [r4, #8]
 8002d6e:	2900      	cmp	r1, #0
 8002d70:	d1ed      	bne.n	8002d4e <_puts_r+0x52>
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	da11      	bge.n	8002d9a <_puts_r+0x9e>
 8002d76:	4622      	mov	r2, r4
 8002d78:	210a      	movs	r1, #10
 8002d7a:	4628      	mov	r0, r5
 8002d7c:	f000 f85f 	bl	8002e3e <__swbuf_r>
 8002d80:	3001      	adds	r0, #1
 8002d82:	d0d7      	beq.n	8002d34 <_puts_r+0x38>
 8002d84:	250a      	movs	r5, #10
 8002d86:	e7d7      	b.n	8002d38 <_puts_r+0x3c>
 8002d88:	4622      	mov	r2, r4
 8002d8a:	4628      	mov	r0, r5
 8002d8c:	f000 f857 	bl	8002e3e <__swbuf_r>
 8002d90:	3001      	adds	r0, #1
 8002d92:	d1e7      	bne.n	8002d64 <_puts_r+0x68>
 8002d94:	e7ce      	b.n	8002d34 <_puts_r+0x38>
 8002d96:	3e01      	subs	r6, #1
 8002d98:	e7e4      	b.n	8002d64 <_puts_r+0x68>
 8002d9a:	6823      	ldr	r3, [r4, #0]
 8002d9c:	1c5a      	adds	r2, r3, #1
 8002d9e:	6022      	str	r2, [r4, #0]
 8002da0:	220a      	movs	r2, #10
 8002da2:	701a      	strb	r2, [r3, #0]
 8002da4:	e7ee      	b.n	8002d84 <_puts_r+0x88>
	...

08002da8 <puts>:
 8002da8:	4b02      	ldr	r3, [pc, #8]	@ (8002db4 <puts+0xc>)
 8002daa:	4601      	mov	r1, r0
 8002dac:	6818      	ldr	r0, [r3, #0]
 8002dae:	f7ff bfa5 	b.w	8002cfc <_puts_r>
 8002db2:	bf00      	nop
 8002db4:	20000018 	.word	0x20000018

08002db8 <__sread>:
 8002db8:	b510      	push	{r4, lr}
 8002dba:	460c      	mov	r4, r1
 8002dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dc0:	f000 f8fc 	bl	8002fbc <_read_r>
 8002dc4:	2800      	cmp	r0, #0
 8002dc6:	bfab      	itete	ge
 8002dc8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002dca:	89a3      	ldrhlt	r3, [r4, #12]
 8002dcc:	181b      	addge	r3, r3, r0
 8002dce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002dd2:	bfac      	ite	ge
 8002dd4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002dd6:	81a3      	strhlt	r3, [r4, #12]
 8002dd8:	bd10      	pop	{r4, pc}

08002dda <__swrite>:
 8002dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dde:	461f      	mov	r7, r3
 8002de0:	898b      	ldrh	r3, [r1, #12]
 8002de2:	05db      	lsls	r3, r3, #23
 8002de4:	4605      	mov	r5, r0
 8002de6:	460c      	mov	r4, r1
 8002de8:	4616      	mov	r6, r2
 8002dea:	d505      	bpl.n	8002df8 <__swrite+0x1e>
 8002dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002df0:	2302      	movs	r3, #2
 8002df2:	2200      	movs	r2, #0
 8002df4:	f000 f8d0 	bl	8002f98 <_lseek_r>
 8002df8:	89a3      	ldrh	r3, [r4, #12]
 8002dfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002dfe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e02:	81a3      	strh	r3, [r4, #12]
 8002e04:	4632      	mov	r2, r6
 8002e06:	463b      	mov	r3, r7
 8002e08:	4628      	mov	r0, r5
 8002e0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e0e:	f000 b8e7 	b.w	8002fe0 <_write_r>

08002e12 <__sseek>:
 8002e12:	b510      	push	{r4, lr}
 8002e14:	460c      	mov	r4, r1
 8002e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e1a:	f000 f8bd 	bl	8002f98 <_lseek_r>
 8002e1e:	1c43      	adds	r3, r0, #1
 8002e20:	89a3      	ldrh	r3, [r4, #12]
 8002e22:	bf15      	itete	ne
 8002e24:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002e26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002e2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002e2e:	81a3      	strheq	r3, [r4, #12]
 8002e30:	bf18      	it	ne
 8002e32:	81a3      	strhne	r3, [r4, #12]
 8002e34:	bd10      	pop	{r4, pc}

08002e36 <__sclose>:
 8002e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e3a:	f000 b89d 	b.w	8002f78 <_close_r>

08002e3e <__swbuf_r>:
 8002e3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e40:	460e      	mov	r6, r1
 8002e42:	4614      	mov	r4, r2
 8002e44:	4605      	mov	r5, r0
 8002e46:	b118      	cbz	r0, 8002e50 <__swbuf_r+0x12>
 8002e48:	6a03      	ldr	r3, [r0, #32]
 8002e4a:	b90b      	cbnz	r3, 8002e50 <__swbuf_r+0x12>
 8002e4c:	f7ff ff20 	bl	8002c90 <__sinit>
 8002e50:	69a3      	ldr	r3, [r4, #24]
 8002e52:	60a3      	str	r3, [r4, #8]
 8002e54:	89a3      	ldrh	r3, [r4, #12]
 8002e56:	071a      	lsls	r2, r3, #28
 8002e58:	d501      	bpl.n	8002e5e <__swbuf_r+0x20>
 8002e5a:	6923      	ldr	r3, [r4, #16]
 8002e5c:	b943      	cbnz	r3, 8002e70 <__swbuf_r+0x32>
 8002e5e:	4621      	mov	r1, r4
 8002e60:	4628      	mov	r0, r5
 8002e62:	f000 f82b 	bl	8002ebc <__swsetup_r>
 8002e66:	b118      	cbz	r0, 8002e70 <__swbuf_r+0x32>
 8002e68:	f04f 37ff 	mov.w	r7, #4294967295
 8002e6c:	4638      	mov	r0, r7
 8002e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e70:	6823      	ldr	r3, [r4, #0]
 8002e72:	6922      	ldr	r2, [r4, #16]
 8002e74:	1a98      	subs	r0, r3, r2
 8002e76:	6963      	ldr	r3, [r4, #20]
 8002e78:	b2f6      	uxtb	r6, r6
 8002e7a:	4283      	cmp	r3, r0
 8002e7c:	4637      	mov	r7, r6
 8002e7e:	dc05      	bgt.n	8002e8c <__swbuf_r+0x4e>
 8002e80:	4621      	mov	r1, r4
 8002e82:	4628      	mov	r0, r5
 8002e84:	f000 fa68 	bl	8003358 <_fflush_r>
 8002e88:	2800      	cmp	r0, #0
 8002e8a:	d1ed      	bne.n	8002e68 <__swbuf_r+0x2a>
 8002e8c:	68a3      	ldr	r3, [r4, #8]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	60a3      	str	r3, [r4, #8]
 8002e92:	6823      	ldr	r3, [r4, #0]
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	6022      	str	r2, [r4, #0]
 8002e98:	701e      	strb	r6, [r3, #0]
 8002e9a:	6962      	ldr	r2, [r4, #20]
 8002e9c:	1c43      	adds	r3, r0, #1
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d004      	beq.n	8002eac <__swbuf_r+0x6e>
 8002ea2:	89a3      	ldrh	r3, [r4, #12]
 8002ea4:	07db      	lsls	r3, r3, #31
 8002ea6:	d5e1      	bpl.n	8002e6c <__swbuf_r+0x2e>
 8002ea8:	2e0a      	cmp	r6, #10
 8002eaa:	d1df      	bne.n	8002e6c <__swbuf_r+0x2e>
 8002eac:	4621      	mov	r1, r4
 8002eae:	4628      	mov	r0, r5
 8002eb0:	f000 fa52 	bl	8003358 <_fflush_r>
 8002eb4:	2800      	cmp	r0, #0
 8002eb6:	d0d9      	beq.n	8002e6c <__swbuf_r+0x2e>
 8002eb8:	e7d6      	b.n	8002e68 <__swbuf_r+0x2a>
	...

08002ebc <__swsetup_r>:
 8002ebc:	b538      	push	{r3, r4, r5, lr}
 8002ebe:	4b29      	ldr	r3, [pc, #164]	@ (8002f64 <__swsetup_r+0xa8>)
 8002ec0:	4605      	mov	r5, r0
 8002ec2:	6818      	ldr	r0, [r3, #0]
 8002ec4:	460c      	mov	r4, r1
 8002ec6:	b118      	cbz	r0, 8002ed0 <__swsetup_r+0x14>
 8002ec8:	6a03      	ldr	r3, [r0, #32]
 8002eca:	b90b      	cbnz	r3, 8002ed0 <__swsetup_r+0x14>
 8002ecc:	f7ff fee0 	bl	8002c90 <__sinit>
 8002ed0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ed4:	0719      	lsls	r1, r3, #28
 8002ed6:	d422      	bmi.n	8002f1e <__swsetup_r+0x62>
 8002ed8:	06da      	lsls	r2, r3, #27
 8002eda:	d407      	bmi.n	8002eec <__swsetup_r+0x30>
 8002edc:	2209      	movs	r2, #9
 8002ede:	602a      	str	r2, [r5, #0]
 8002ee0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ee4:	81a3      	strh	r3, [r4, #12]
 8002ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8002eea:	e033      	b.n	8002f54 <__swsetup_r+0x98>
 8002eec:	0758      	lsls	r0, r3, #29
 8002eee:	d512      	bpl.n	8002f16 <__swsetup_r+0x5a>
 8002ef0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002ef2:	b141      	cbz	r1, 8002f06 <__swsetup_r+0x4a>
 8002ef4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002ef8:	4299      	cmp	r1, r3
 8002efa:	d002      	beq.n	8002f02 <__swsetup_r+0x46>
 8002efc:	4628      	mov	r0, r5
 8002efe:	f000 f8af 	bl	8003060 <_free_r>
 8002f02:	2300      	movs	r3, #0
 8002f04:	6363      	str	r3, [r4, #52]	@ 0x34
 8002f06:	89a3      	ldrh	r3, [r4, #12]
 8002f08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002f0c:	81a3      	strh	r3, [r4, #12]
 8002f0e:	2300      	movs	r3, #0
 8002f10:	6063      	str	r3, [r4, #4]
 8002f12:	6923      	ldr	r3, [r4, #16]
 8002f14:	6023      	str	r3, [r4, #0]
 8002f16:	89a3      	ldrh	r3, [r4, #12]
 8002f18:	f043 0308 	orr.w	r3, r3, #8
 8002f1c:	81a3      	strh	r3, [r4, #12]
 8002f1e:	6923      	ldr	r3, [r4, #16]
 8002f20:	b94b      	cbnz	r3, 8002f36 <__swsetup_r+0x7a>
 8002f22:	89a3      	ldrh	r3, [r4, #12]
 8002f24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002f28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f2c:	d003      	beq.n	8002f36 <__swsetup_r+0x7a>
 8002f2e:	4621      	mov	r1, r4
 8002f30:	4628      	mov	r0, r5
 8002f32:	f000 fa5f 	bl	80033f4 <__smakebuf_r>
 8002f36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f3a:	f013 0201 	ands.w	r2, r3, #1
 8002f3e:	d00a      	beq.n	8002f56 <__swsetup_r+0x9a>
 8002f40:	2200      	movs	r2, #0
 8002f42:	60a2      	str	r2, [r4, #8]
 8002f44:	6962      	ldr	r2, [r4, #20]
 8002f46:	4252      	negs	r2, r2
 8002f48:	61a2      	str	r2, [r4, #24]
 8002f4a:	6922      	ldr	r2, [r4, #16]
 8002f4c:	b942      	cbnz	r2, 8002f60 <__swsetup_r+0xa4>
 8002f4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002f52:	d1c5      	bne.n	8002ee0 <__swsetup_r+0x24>
 8002f54:	bd38      	pop	{r3, r4, r5, pc}
 8002f56:	0799      	lsls	r1, r3, #30
 8002f58:	bf58      	it	pl
 8002f5a:	6962      	ldrpl	r2, [r4, #20]
 8002f5c:	60a2      	str	r2, [r4, #8]
 8002f5e:	e7f4      	b.n	8002f4a <__swsetup_r+0x8e>
 8002f60:	2000      	movs	r0, #0
 8002f62:	e7f7      	b.n	8002f54 <__swsetup_r+0x98>
 8002f64:	20000018 	.word	0x20000018

08002f68 <memset>:
 8002f68:	4402      	add	r2, r0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d100      	bne.n	8002f72 <memset+0xa>
 8002f70:	4770      	bx	lr
 8002f72:	f803 1b01 	strb.w	r1, [r3], #1
 8002f76:	e7f9      	b.n	8002f6c <memset+0x4>

08002f78 <_close_r>:
 8002f78:	b538      	push	{r3, r4, r5, lr}
 8002f7a:	4d06      	ldr	r5, [pc, #24]	@ (8002f94 <_close_r+0x1c>)
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	4604      	mov	r4, r0
 8002f80:	4608      	mov	r0, r1
 8002f82:	602b      	str	r3, [r5, #0]
 8002f84:	f7fd fc6f 	bl	8000866 <_close>
 8002f88:	1c43      	adds	r3, r0, #1
 8002f8a:	d102      	bne.n	8002f92 <_close_r+0x1a>
 8002f8c:	682b      	ldr	r3, [r5, #0]
 8002f8e:	b103      	cbz	r3, 8002f92 <_close_r+0x1a>
 8002f90:	6023      	str	r3, [r4, #0]
 8002f92:	bd38      	pop	{r3, r4, r5, pc}
 8002f94:	20000328 	.word	0x20000328

08002f98 <_lseek_r>:
 8002f98:	b538      	push	{r3, r4, r5, lr}
 8002f9a:	4d07      	ldr	r5, [pc, #28]	@ (8002fb8 <_lseek_r+0x20>)
 8002f9c:	4604      	mov	r4, r0
 8002f9e:	4608      	mov	r0, r1
 8002fa0:	4611      	mov	r1, r2
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	602a      	str	r2, [r5, #0]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	f7fd fc84 	bl	80008b4 <_lseek>
 8002fac:	1c43      	adds	r3, r0, #1
 8002fae:	d102      	bne.n	8002fb6 <_lseek_r+0x1e>
 8002fb0:	682b      	ldr	r3, [r5, #0]
 8002fb2:	b103      	cbz	r3, 8002fb6 <_lseek_r+0x1e>
 8002fb4:	6023      	str	r3, [r4, #0]
 8002fb6:	bd38      	pop	{r3, r4, r5, pc}
 8002fb8:	20000328 	.word	0x20000328

08002fbc <_read_r>:
 8002fbc:	b538      	push	{r3, r4, r5, lr}
 8002fbe:	4d07      	ldr	r5, [pc, #28]	@ (8002fdc <_read_r+0x20>)
 8002fc0:	4604      	mov	r4, r0
 8002fc2:	4608      	mov	r0, r1
 8002fc4:	4611      	mov	r1, r2
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	602a      	str	r2, [r5, #0]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	f7fd fc2e 	bl	800082c <_read>
 8002fd0:	1c43      	adds	r3, r0, #1
 8002fd2:	d102      	bne.n	8002fda <_read_r+0x1e>
 8002fd4:	682b      	ldr	r3, [r5, #0]
 8002fd6:	b103      	cbz	r3, 8002fda <_read_r+0x1e>
 8002fd8:	6023      	str	r3, [r4, #0]
 8002fda:	bd38      	pop	{r3, r4, r5, pc}
 8002fdc:	20000328 	.word	0x20000328

08002fe0 <_write_r>:
 8002fe0:	b538      	push	{r3, r4, r5, lr}
 8002fe2:	4d07      	ldr	r5, [pc, #28]	@ (8003000 <_write_r+0x20>)
 8002fe4:	4604      	mov	r4, r0
 8002fe6:	4608      	mov	r0, r1
 8002fe8:	4611      	mov	r1, r2
 8002fea:	2200      	movs	r2, #0
 8002fec:	602a      	str	r2, [r5, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	f7fd fcb6 	bl	8000960 <_write>
 8002ff4:	1c43      	adds	r3, r0, #1
 8002ff6:	d102      	bne.n	8002ffe <_write_r+0x1e>
 8002ff8:	682b      	ldr	r3, [r5, #0]
 8002ffa:	b103      	cbz	r3, 8002ffe <_write_r+0x1e>
 8002ffc:	6023      	str	r3, [r4, #0]
 8002ffe:	bd38      	pop	{r3, r4, r5, pc}
 8003000:	20000328 	.word	0x20000328

08003004 <__errno>:
 8003004:	4b01      	ldr	r3, [pc, #4]	@ (800300c <__errno+0x8>)
 8003006:	6818      	ldr	r0, [r3, #0]
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	20000018 	.word	0x20000018

08003010 <__libc_init_array>:
 8003010:	b570      	push	{r4, r5, r6, lr}
 8003012:	4d0d      	ldr	r5, [pc, #52]	@ (8003048 <__libc_init_array+0x38>)
 8003014:	4c0d      	ldr	r4, [pc, #52]	@ (800304c <__libc_init_array+0x3c>)
 8003016:	1b64      	subs	r4, r4, r5
 8003018:	10a4      	asrs	r4, r4, #2
 800301a:	2600      	movs	r6, #0
 800301c:	42a6      	cmp	r6, r4
 800301e:	d109      	bne.n	8003034 <__libc_init_array+0x24>
 8003020:	4d0b      	ldr	r5, [pc, #44]	@ (8003050 <__libc_init_array+0x40>)
 8003022:	4c0c      	ldr	r4, [pc, #48]	@ (8003054 <__libc_init_array+0x44>)
 8003024:	f000 fa54 	bl	80034d0 <_init>
 8003028:	1b64      	subs	r4, r4, r5
 800302a:	10a4      	asrs	r4, r4, #2
 800302c:	2600      	movs	r6, #0
 800302e:	42a6      	cmp	r6, r4
 8003030:	d105      	bne.n	800303e <__libc_init_array+0x2e>
 8003032:	bd70      	pop	{r4, r5, r6, pc}
 8003034:	f855 3b04 	ldr.w	r3, [r5], #4
 8003038:	4798      	blx	r3
 800303a:	3601      	adds	r6, #1
 800303c:	e7ee      	b.n	800301c <__libc_init_array+0xc>
 800303e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003042:	4798      	blx	r3
 8003044:	3601      	adds	r6, #1
 8003046:	e7f2      	b.n	800302e <__libc_init_array+0x1e>
 8003048:	08003540 	.word	0x08003540
 800304c:	08003540 	.word	0x08003540
 8003050:	08003540 	.word	0x08003540
 8003054:	08003544 	.word	0x08003544

08003058 <__retarget_lock_init_recursive>:
 8003058:	4770      	bx	lr

0800305a <__retarget_lock_acquire_recursive>:
 800305a:	4770      	bx	lr

0800305c <__retarget_lock_release_recursive>:
 800305c:	4770      	bx	lr
	...

08003060 <_free_r>:
 8003060:	b538      	push	{r3, r4, r5, lr}
 8003062:	4605      	mov	r5, r0
 8003064:	2900      	cmp	r1, #0
 8003066:	d041      	beq.n	80030ec <_free_r+0x8c>
 8003068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800306c:	1f0c      	subs	r4, r1, #4
 800306e:	2b00      	cmp	r3, #0
 8003070:	bfb8      	it	lt
 8003072:	18e4      	addlt	r4, r4, r3
 8003074:	f000 f8e0 	bl	8003238 <__malloc_lock>
 8003078:	4a1d      	ldr	r2, [pc, #116]	@ (80030f0 <_free_r+0x90>)
 800307a:	6813      	ldr	r3, [r2, #0]
 800307c:	b933      	cbnz	r3, 800308c <_free_r+0x2c>
 800307e:	6063      	str	r3, [r4, #4]
 8003080:	6014      	str	r4, [r2, #0]
 8003082:	4628      	mov	r0, r5
 8003084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003088:	f000 b8dc 	b.w	8003244 <__malloc_unlock>
 800308c:	42a3      	cmp	r3, r4
 800308e:	d908      	bls.n	80030a2 <_free_r+0x42>
 8003090:	6820      	ldr	r0, [r4, #0]
 8003092:	1821      	adds	r1, r4, r0
 8003094:	428b      	cmp	r3, r1
 8003096:	bf01      	itttt	eq
 8003098:	6819      	ldreq	r1, [r3, #0]
 800309a:	685b      	ldreq	r3, [r3, #4]
 800309c:	1809      	addeq	r1, r1, r0
 800309e:	6021      	streq	r1, [r4, #0]
 80030a0:	e7ed      	b.n	800307e <_free_r+0x1e>
 80030a2:	461a      	mov	r2, r3
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	b10b      	cbz	r3, 80030ac <_free_r+0x4c>
 80030a8:	42a3      	cmp	r3, r4
 80030aa:	d9fa      	bls.n	80030a2 <_free_r+0x42>
 80030ac:	6811      	ldr	r1, [r2, #0]
 80030ae:	1850      	adds	r0, r2, r1
 80030b0:	42a0      	cmp	r0, r4
 80030b2:	d10b      	bne.n	80030cc <_free_r+0x6c>
 80030b4:	6820      	ldr	r0, [r4, #0]
 80030b6:	4401      	add	r1, r0
 80030b8:	1850      	adds	r0, r2, r1
 80030ba:	4283      	cmp	r3, r0
 80030bc:	6011      	str	r1, [r2, #0]
 80030be:	d1e0      	bne.n	8003082 <_free_r+0x22>
 80030c0:	6818      	ldr	r0, [r3, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	6053      	str	r3, [r2, #4]
 80030c6:	4408      	add	r0, r1
 80030c8:	6010      	str	r0, [r2, #0]
 80030ca:	e7da      	b.n	8003082 <_free_r+0x22>
 80030cc:	d902      	bls.n	80030d4 <_free_r+0x74>
 80030ce:	230c      	movs	r3, #12
 80030d0:	602b      	str	r3, [r5, #0]
 80030d2:	e7d6      	b.n	8003082 <_free_r+0x22>
 80030d4:	6820      	ldr	r0, [r4, #0]
 80030d6:	1821      	adds	r1, r4, r0
 80030d8:	428b      	cmp	r3, r1
 80030da:	bf04      	itt	eq
 80030dc:	6819      	ldreq	r1, [r3, #0]
 80030de:	685b      	ldreq	r3, [r3, #4]
 80030e0:	6063      	str	r3, [r4, #4]
 80030e2:	bf04      	itt	eq
 80030e4:	1809      	addeq	r1, r1, r0
 80030e6:	6021      	streq	r1, [r4, #0]
 80030e8:	6054      	str	r4, [r2, #4]
 80030ea:	e7ca      	b.n	8003082 <_free_r+0x22>
 80030ec:	bd38      	pop	{r3, r4, r5, pc}
 80030ee:	bf00      	nop
 80030f0:	20000334 	.word	0x20000334

080030f4 <sbrk_aligned>:
 80030f4:	b570      	push	{r4, r5, r6, lr}
 80030f6:	4e0f      	ldr	r6, [pc, #60]	@ (8003134 <sbrk_aligned+0x40>)
 80030f8:	460c      	mov	r4, r1
 80030fa:	6831      	ldr	r1, [r6, #0]
 80030fc:	4605      	mov	r5, r0
 80030fe:	b911      	cbnz	r1, 8003106 <sbrk_aligned+0x12>
 8003100:	f000 f9d6 	bl	80034b0 <_sbrk_r>
 8003104:	6030      	str	r0, [r6, #0]
 8003106:	4621      	mov	r1, r4
 8003108:	4628      	mov	r0, r5
 800310a:	f000 f9d1 	bl	80034b0 <_sbrk_r>
 800310e:	1c43      	adds	r3, r0, #1
 8003110:	d103      	bne.n	800311a <sbrk_aligned+0x26>
 8003112:	f04f 34ff 	mov.w	r4, #4294967295
 8003116:	4620      	mov	r0, r4
 8003118:	bd70      	pop	{r4, r5, r6, pc}
 800311a:	1cc4      	adds	r4, r0, #3
 800311c:	f024 0403 	bic.w	r4, r4, #3
 8003120:	42a0      	cmp	r0, r4
 8003122:	d0f8      	beq.n	8003116 <sbrk_aligned+0x22>
 8003124:	1a21      	subs	r1, r4, r0
 8003126:	4628      	mov	r0, r5
 8003128:	f000 f9c2 	bl	80034b0 <_sbrk_r>
 800312c:	3001      	adds	r0, #1
 800312e:	d1f2      	bne.n	8003116 <sbrk_aligned+0x22>
 8003130:	e7ef      	b.n	8003112 <sbrk_aligned+0x1e>
 8003132:	bf00      	nop
 8003134:	20000330 	.word	0x20000330

08003138 <_malloc_r>:
 8003138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800313c:	1ccd      	adds	r5, r1, #3
 800313e:	f025 0503 	bic.w	r5, r5, #3
 8003142:	3508      	adds	r5, #8
 8003144:	2d0c      	cmp	r5, #12
 8003146:	bf38      	it	cc
 8003148:	250c      	movcc	r5, #12
 800314a:	2d00      	cmp	r5, #0
 800314c:	4606      	mov	r6, r0
 800314e:	db01      	blt.n	8003154 <_malloc_r+0x1c>
 8003150:	42a9      	cmp	r1, r5
 8003152:	d904      	bls.n	800315e <_malloc_r+0x26>
 8003154:	230c      	movs	r3, #12
 8003156:	6033      	str	r3, [r6, #0]
 8003158:	2000      	movs	r0, #0
 800315a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800315e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003234 <_malloc_r+0xfc>
 8003162:	f000 f869 	bl	8003238 <__malloc_lock>
 8003166:	f8d8 3000 	ldr.w	r3, [r8]
 800316a:	461c      	mov	r4, r3
 800316c:	bb44      	cbnz	r4, 80031c0 <_malloc_r+0x88>
 800316e:	4629      	mov	r1, r5
 8003170:	4630      	mov	r0, r6
 8003172:	f7ff ffbf 	bl	80030f4 <sbrk_aligned>
 8003176:	1c43      	adds	r3, r0, #1
 8003178:	4604      	mov	r4, r0
 800317a:	d158      	bne.n	800322e <_malloc_r+0xf6>
 800317c:	f8d8 4000 	ldr.w	r4, [r8]
 8003180:	4627      	mov	r7, r4
 8003182:	2f00      	cmp	r7, #0
 8003184:	d143      	bne.n	800320e <_malloc_r+0xd6>
 8003186:	2c00      	cmp	r4, #0
 8003188:	d04b      	beq.n	8003222 <_malloc_r+0xea>
 800318a:	6823      	ldr	r3, [r4, #0]
 800318c:	4639      	mov	r1, r7
 800318e:	4630      	mov	r0, r6
 8003190:	eb04 0903 	add.w	r9, r4, r3
 8003194:	f000 f98c 	bl	80034b0 <_sbrk_r>
 8003198:	4581      	cmp	r9, r0
 800319a:	d142      	bne.n	8003222 <_malloc_r+0xea>
 800319c:	6821      	ldr	r1, [r4, #0]
 800319e:	1a6d      	subs	r5, r5, r1
 80031a0:	4629      	mov	r1, r5
 80031a2:	4630      	mov	r0, r6
 80031a4:	f7ff ffa6 	bl	80030f4 <sbrk_aligned>
 80031a8:	3001      	adds	r0, #1
 80031aa:	d03a      	beq.n	8003222 <_malloc_r+0xea>
 80031ac:	6823      	ldr	r3, [r4, #0]
 80031ae:	442b      	add	r3, r5
 80031b0:	6023      	str	r3, [r4, #0]
 80031b2:	f8d8 3000 	ldr.w	r3, [r8]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	bb62      	cbnz	r2, 8003214 <_malloc_r+0xdc>
 80031ba:	f8c8 7000 	str.w	r7, [r8]
 80031be:	e00f      	b.n	80031e0 <_malloc_r+0xa8>
 80031c0:	6822      	ldr	r2, [r4, #0]
 80031c2:	1b52      	subs	r2, r2, r5
 80031c4:	d420      	bmi.n	8003208 <_malloc_r+0xd0>
 80031c6:	2a0b      	cmp	r2, #11
 80031c8:	d917      	bls.n	80031fa <_malloc_r+0xc2>
 80031ca:	1961      	adds	r1, r4, r5
 80031cc:	42a3      	cmp	r3, r4
 80031ce:	6025      	str	r5, [r4, #0]
 80031d0:	bf18      	it	ne
 80031d2:	6059      	strne	r1, [r3, #4]
 80031d4:	6863      	ldr	r3, [r4, #4]
 80031d6:	bf08      	it	eq
 80031d8:	f8c8 1000 	streq.w	r1, [r8]
 80031dc:	5162      	str	r2, [r4, r5]
 80031de:	604b      	str	r3, [r1, #4]
 80031e0:	4630      	mov	r0, r6
 80031e2:	f000 f82f 	bl	8003244 <__malloc_unlock>
 80031e6:	f104 000b 	add.w	r0, r4, #11
 80031ea:	1d23      	adds	r3, r4, #4
 80031ec:	f020 0007 	bic.w	r0, r0, #7
 80031f0:	1ac2      	subs	r2, r0, r3
 80031f2:	bf1c      	itt	ne
 80031f4:	1a1b      	subne	r3, r3, r0
 80031f6:	50a3      	strne	r3, [r4, r2]
 80031f8:	e7af      	b.n	800315a <_malloc_r+0x22>
 80031fa:	6862      	ldr	r2, [r4, #4]
 80031fc:	42a3      	cmp	r3, r4
 80031fe:	bf0c      	ite	eq
 8003200:	f8c8 2000 	streq.w	r2, [r8]
 8003204:	605a      	strne	r2, [r3, #4]
 8003206:	e7eb      	b.n	80031e0 <_malloc_r+0xa8>
 8003208:	4623      	mov	r3, r4
 800320a:	6864      	ldr	r4, [r4, #4]
 800320c:	e7ae      	b.n	800316c <_malloc_r+0x34>
 800320e:	463c      	mov	r4, r7
 8003210:	687f      	ldr	r7, [r7, #4]
 8003212:	e7b6      	b.n	8003182 <_malloc_r+0x4a>
 8003214:	461a      	mov	r2, r3
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	42a3      	cmp	r3, r4
 800321a:	d1fb      	bne.n	8003214 <_malloc_r+0xdc>
 800321c:	2300      	movs	r3, #0
 800321e:	6053      	str	r3, [r2, #4]
 8003220:	e7de      	b.n	80031e0 <_malloc_r+0xa8>
 8003222:	230c      	movs	r3, #12
 8003224:	6033      	str	r3, [r6, #0]
 8003226:	4630      	mov	r0, r6
 8003228:	f000 f80c 	bl	8003244 <__malloc_unlock>
 800322c:	e794      	b.n	8003158 <_malloc_r+0x20>
 800322e:	6005      	str	r5, [r0, #0]
 8003230:	e7d6      	b.n	80031e0 <_malloc_r+0xa8>
 8003232:	bf00      	nop
 8003234:	20000334 	.word	0x20000334

08003238 <__malloc_lock>:
 8003238:	4801      	ldr	r0, [pc, #4]	@ (8003240 <__malloc_lock+0x8>)
 800323a:	f7ff bf0e 	b.w	800305a <__retarget_lock_acquire_recursive>
 800323e:	bf00      	nop
 8003240:	2000032c 	.word	0x2000032c

08003244 <__malloc_unlock>:
 8003244:	4801      	ldr	r0, [pc, #4]	@ (800324c <__malloc_unlock+0x8>)
 8003246:	f7ff bf09 	b.w	800305c <__retarget_lock_release_recursive>
 800324a:	bf00      	nop
 800324c:	2000032c 	.word	0x2000032c

08003250 <__sflush_r>:
 8003250:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003258:	0716      	lsls	r6, r2, #28
 800325a:	4605      	mov	r5, r0
 800325c:	460c      	mov	r4, r1
 800325e:	d454      	bmi.n	800330a <__sflush_r+0xba>
 8003260:	684b      	ldr	r3, [r1, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	dc02      	bgt.n	800326c <__sflush_r+0x1c>
 8003266:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003268:	2b00      	cmp	r3, #0
 800326a:	dd48      	ble.n	80032fe <__sflush_r+0xae>
 800326c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800326e:	2e00      	cmp	r6, #0
 8003270:	d045      	beq.n	80032fe <__sflush_r+0xae>
 8003272:	2300      	movs	r3, #0
 8003274:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003278:	682f      	ldr	r7, [r5, #0]
 800327a:	6a21      	ldr	r1, [r4, #32]
 800327c:	602b      	str	r3, [r5, #0]
 800327e:	d030      	beq.n	80032e2 <__sflush_r+0x92>
 8003280:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003282:	89a3      	ldrh	r3, [r4, #12]
 8003284:	0759      	lsls	r1, r3, #29
 8003286:	d505      	bpl.n	8003294 <__sflush_r+0x44>
 8003288:	6863      	ldr	r3, [r4, #4]
 800328a:	1ad2      	subs	r2, r2, r3
 800328c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800328e:	b10b      	cbz	r3, 8003294 <__sflush_r+0x44>
 8003290:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003292:	1ad2      	subs	r2, r2, r3
 8003294:	2300      	movs	r3, #0
 8003296:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003298:	6a21      	ldr	r1, [r4, #32]
 800329a:	4628      	mov	r0, r5
 800329c:	47b0      	blx	r6
 800329e:	1c43      	adds	r3, r0, #1
 80032a0:	89a3      	ldrh	r3, [r4, #12]
 80032a2:	d106      	bne.n	80032b2 <__sflush_r+0x62>
 80032a4:	6829      	ldr	r1, [r5, #0]
 80032a6:	291d      	cmp	r1, #29
 80032a8:	d82b      	bhi.n	8003302 <__sflush_r+0xb2>
 80032aa:	4a2a      	ldr	r2, [pc, #168]	@ (8003354 <__sflush_r+0x104>)
 80032ac:	410a      	asrs	r2, r1
 80032ae:	07d6      	lsls	r6, r2, #31
 80032b0:	d427      	bmi.n	8003302 <__sflush_r+0xb2>
 80032b2:	2200      	movs	r2, #0
 80032b4:	6062      	str	r2, [r4, #4]
 80032b6:	04d9      	lsls	r1, r3, #19
 80032b8:	6922      	ldr	r2, [r4, #16]
 80032ba:	6022      	str	r2, [r4, #0]
 80032bc:	d504      	bpl.n	80032c8 <__sflush_r+0x78>
 80032be:	1c42      	adds	r2, r0, #1
 80032c0:	d101      	bne.n	80032c6 <__sflush_r+0x76>
 80032c2:	682b      	ldr	r3, [r5, #0]
 80032c4:	b903      	cbnz	r3, 80032c8 <__sflush_r+0x78>
 80032c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80032c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80032ca:	602f      	str	r7, [r5, #0]
 80032cc:	b1b9      	cbz	r1, 80032fe <__sflush_r+0xae>
 80032ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80032d2:	4299      	cmp	r1, r3
 80032d4:	d002      	beq.n	80032dc <__sflush_r+0x8c>
 80032d6:	4628      	mov	r0, r5
 80032d8:	f7ff fec2 	bl	8003060 <_free_r>
 80032dc:	2300      	movs	r3, #0
 80032de:	6363      	str	r3, [r4, #52]	@ 0x34
 80032e0:	e00d      	b.n	80032fe <__sflush_r+0xae>
 80032e2:	2301      	movs	r3, #1
 80032e4:	4628      	mov	r0, r5
 80032e6:	47b0      	blx	r6
 80032e8:	4602      	mov	r2, r0
 80032ea:	1c50      	adds	r0, r2, #1
 80032ec:	d1c9      	bne.n	8003282 <__sflush_r+0x32>
 80032ee:	682b      	ldr	r3, [r5, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0c6      	beq.n	8003282 <__sflush_r+0x32>
 80032f4:	2b1d      	cmp	r3, #29
 80032f6:	d001      	beq.n	80032fc <__sflush_r+0xac>
 80032f8:	2b16      	cmp	r3, #22
 80032fa:	d11e      	bne.n	800333a <__sflush_r+0xea>
 80032fc:	602f      	str	r7, [r5, #0]
 80032fe:	2000      	movs	r0, #0
 8003300:	e022      	b.n	8003348 <__sflush_r+0xf8>
 8003302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003306:	b21b      	sxth	r3, r3
 8003308:	e01b      	b.n	8003342 <__sflush_r+0xf2>
 800330a:	690f      	ldr	r7, [r1, #16]
 800330c:	2f00      	cmp	r7, #0
 800330e:	d0f6      	beq.n	80032fe <__sflush_r+0xae>
 8003310:	0793      	lsls	r3, r2, #30
 8003312:	680e      	ldr	r6, [r1, #0]
 8003314:	bf08      	it	eq
 8003316:	694b      	ldreq	r3, [r1, #20]
 8003318:	600f      	str	r7, [r1, #0]
 800331a:	bf18      	it	ne
 800331c:	2300      	movne	r3, #0
 800331e:	eba6 0807 	sub.w	r8, r6, r7
 8003322:	608b      	str	r3, [r1, #8]
 8003324:	f1b8 0f00 	cmp.w	r8, #0
 8003328:	dde9      	ble.n	80032fe <__sflush_r+0xae>
 800332a:	6a21      	ldr	r1, [r4, #32]
 800332c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800332e:	4643      	mov	r3, r8
 8003330:	463a      	mov	r2, r7
 8003332:	4628      	mov	r0, r5
 8003334:	47b0      	blx	r6
 8003336:	2800      	cmp	r0, #0
 8003338:	dc08      	bgt.n	800334c <__sflush_r+0xfc>
 800333a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800333e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003342:	81a3      	strh	r3, [r4, #12]
 8003344:	f04f 30ff 	mov.w	r0, #4294967295
 8003348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800334c:	4407      	add	r7, r0
 800334e:	eba8 0800 	sub.w	r8, r8, r0
 8003352:	e7e7      	b.n	8003324 <__sflush_r+0xd4>
 8003354:	dfbffffe 	.word	0xdfbffffe

08003358 <_fflush_r>:
 8003358:	b538      	push	{r3, r4, r5, lr}
 800335a:	690b      	ldr	r3, [r1, #16]
 800335c:	4605      	mov	r5, r0
 800335e:	460c      	mov	r4, r1
 8003360:	b913      	cbnz	r3, 8003368 <_fflush_r+0x10>
 8003362:	2500      	movs	r5, #0
 8003364:	4628      	mov	r0, r5
 8003366:	bd38      	pop	{r3, r4, r5, pc}
 8003368:	b118      	cbz	r0, 8003372 <_fflush_r+0x1a>
 800336a:	6a03      	ldr	r3, [r0, #32]
 800336c:	b90b      	cbnz	r3, 8003372 <_fflush_r+0x1a>
 800336e:	f7ff fc8f 	bl	8002c90 <__sinit>
 8003372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0f3      	beq.n	8003362 <_fflush_r+0xa>
 800337a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800337c:	07d0      	lsls	r0, r2, #31
 800337e:	d404      	bmi.n	800338a <_fflush_r+0x32>
 8003380:	0599      	lsls	r1, r3, #22
 8003382:	d402      	bmi.n	800338a <_fflush_r+0x32>
 8003384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003386:	f7ff fe68 	bl	800305a <__retarget_lock_acquire_recursive>
 800338a:	4628      	mov	r0, r5
 800338c:	4621      	mov	r1, r4
 800338e:	f7ff ff5f 	bl	8003250 <__sflush_r>
 8003392:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003394:	07da      	lsls	r2, r3, #31
 8003396:	4605      	mov	r5, r0
 8003398:	d4e4      	bmi.n	8003364 <_fflush_r+0xc>
 800339a:	89a3      	ldrh	r3, [r4, #12]
 800339c:	059b      	lsls	r3, r3, #22
 800339e:	d4e1      	bmi.n	8003364 <_fflush_r+0xc>
 80033a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80033a2:	f7ff fe5b 	bl	800305c <__retarget_lock_release_recursive>
 80033a6:	e7dd      	b.n	8003364 <_fflush_r+0xc>

080033a8 <__swhatbuf_r>:
 80033a8:	b570      	push	{r4, r5, r6, lr}
 80033aa:	460c      	mov	r4, r1
 80033ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033b0:	2900      	cmp	r1, #0
 80033b2:	b096      	sub	sp, #88	@ 0x58
 80033b4:	4615      	mov	r5, r2
 80033b6:	461e      	mov	r6, r3
 80033b8:	da0d      	bge.n	80033d6 <__swhatbuf_r+0x2e>
 80033ba:	89a3      	ldrh	r3, [r4, #12]
 80033bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80033c0:	f04f 0100 	mov.w	r1, #0
 80033c4:	bf14      	ite	ne
 80033c6:	2340      	movne	r3, #64	@ 0x40
 80033c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80033cc:	2000      	movs	r0, #0
 80033ce:	6031      	str	r1, [r6, #0]
 80033d0:	602b      	str	r3, [r5, #0]
 80033d2:	b016      	add	sp, #88	@ 0x58
 80033d4:	bd70      	pop	{r4, r5, r6, pc}
 80033d6:	466a      	mov	r2, sp
 80033d8:	f000 f848 	bl	800346c <_fstat_r>
 80033dc:	2800      	cmp	r0, #0
 80033de:	dbec      	blt.n	80033ba <__swhatbuf_r+0x12>
 80033e0:	9901      	ldr	r1, [sp, #4]
 80033e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80033e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80033ea:	4259      	negs	r1, r3
 80033ec:	4159      	adcs	r1, r3
 80033ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033f2:	e7eb      	b.n	80033cc <__swhatbuf_r+0x24>

080033f4 <__smakebuf_r>:
 80033f4:	898b      	ldrh	r3, [r1, #12]
 80033f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033f8:	079d      	lsls	r5, r3, #30
 80033fa:	4606      	mov	r6, r0
 80033fc:	460c      	mov	r4, r1
 80033fe:	d507      	bpl.n	8003410 <__smakebuf_r+0x1c>
 8003400:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003404:	6023      	str	r3, [r4, #0]
 8003406:	6123      	str	r3, [r4, #16]
 8003408:	2301      	movs	r3, #1
 800340a:	6163      	str	r3, [r4, #20]
 800340c:	b003      	add	sp, #12
 800340e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003410:	ab01      	add	r3, sp, #4
 8003412:	466a      	mov	r2, sp
 8003414:	f7ff ffc8 	bl	80033a8 <__swhatbuf_r>
 8003418:	9f00      	ldr	r7, [sp, #0]
 800341a:	4605      	mov	r5, r0
 800341c:	4639      	mov	r1, r7
 800341e:	4630      	mov	r0, r6
 8003420:	f7ff fe8a 	bl	8003138 <_malloc_r>
 8003424:	b948      	cbnz	r0, 800343a <__smakebuf_r+0x46>
 8003426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800342a:	059a      	lsls	r2, r3, #22
 800342c:	d4ee      	bmi.n	800340c <__smakebuf_r+0x18>
 800342e:	f023 0303 	bic.w	r3, r3, #3
 8003432:	f043 0302 	orr.w	r3, r3, #2
 8003436:	81a3      	strh	r3, [r4, #12]
 8003438:	e7e2      	b.n	8003400 <__smakebuf_r+0xc>
 800343a:	89a3      	ldrh	r3, [r4, #12]
 800343c:	6020      	str	r0, [r4, #0]
 800343e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003442:	81a3      	strh	r3, [r4, #12]
 8003444:	9b01      	ldr	r3, [sp, #4]
 8003446:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800344a:	b15b      	cbz	r3, 8003464 <__smakebuf_r+0x70>
 800344c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003450:	4630      	mov	r0, r6
 8003452:	f000 f81d 	bl	8003490 <_isatty_r>
 8003456:	b128      	cbz	r0, 8003464 <__smakebuf_r+0x70>
 8003458:	89a3      	ldrh	r3, [r4, #12]
 800345a:	f023 0303 	bic.w	r3, r3, #3
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	81a3      	strh	r3, [r4, #12]
 8003464:	89a3      	ldrh	r3, [r4, #12]
 8003466:	431d      	orrs	r5, r3
 8003468:	81a5      	strh	r5, [r4, #12]
 800346a:	e7cf      	b.n	800340c <__smakebuf_r+0x18>

0800346c <_fstat_r>:
 800346c:	b538      	push	{r3, r4, r5, lr}
 800346e:	4d07      	ldr	r5, [pc, #28]	@ (800348c <_fstat_r+0x20>)
 8003470:	2300      	movs	r3, #0
 8003472:	4604      	mov	r4, r0
 8003474:	4608      	mov	r0, r1
 8003476:	4611      	mov	r1, r2
 8003478:	602b      	str	r3, [r5, #0]
 800347a:	f7fd fa00 	bl	800087e <_fstat>
 800347e:	1c43      	adds	r3, r0, #1
 8003480:	d102      	bne.n	8003488 <_fstat_r+0x1c>
 8003482:	682b      	ldr	r3, [r5, #0]
 8003484:	b103      	cbz	r3, 8003488 <_fstat_r+0x1c>
 8003486:	6023      	str	r3, [r4, #0]
 8003488:	bd38      	pop	{r3, r4, r5, pc}
 800348a:	bf00      	nop
 800348c:	20000328 	.word	0x20000328

08003490 <_isatty_r>:
 8003490:	b538      	push	{r3, r4, r5, lr}
 8003492:	4d06      	ldr	r5, [pc, #24]	@ (80034ac <_isatty_r+0x1c>)
 8003494:	2300      	movs	r3, #0
 8003496:	4604      	mov	r4, r0
 8003498:	4608      	mov	r0, r1
 800349a:	602b      	str	r3, [r5, #0]
 800349c:	f7fd f9ff 	bl	800089e <_isatty>
 80034a0:	1c43      	adds	r3, r0, #1
 80034a2:	d102      	bne.n	80034aa <_isatty_r+0x1a>
 80034a4:	682b      	ldr	r3, [r5, #0]
 80034a6:	b103      	cbz	r3, 80034aa <_isatty_r+0x1a>
 80034a8:	6023      	str	r3, [r4, #0]
 80034aa:	bd38      	pop	{r3, r4, r5, pc}
 80034ac:	20000328 	.word	0x20000328

080034b0 <_sbrk_r>:
 80034b0:	b538      	push	{r3, r4, r5, lr}
 80034b2:	4d06      	ldr	r5, [pc, #24]	@ (80034cc <_sbrk_r+0x1c>)
 80034b4:	2300      	movs	r3, #0
 80034b6:	4604      	mov	r4, r0
 80034b8:	4608      	mov	r0, r1
 80034ba:	602b      	str	r3, [r5, #0]
 80034bc:	f7fd fa08 	bl	80008d0 <_sbrk>
 80034c0:	1c43      	adds	r3, r0, #1
 80034c2:	d102      	bne.n	80034ca <_sbrk_r+0x1a>
 80034c4:	682b      	ldr	r3, [r5, #0]
 80034c6:	b103      	cbz	r3, 80034ca <_sbrk_r+0x1a>
 80034c8:	6023      	str	r3, [r4, #0]
 80034ca:	bd38      	pop	{r3, r4, r5, pc}
 80034cc:	20000328 	.word	0x20000328

080034d0 <_init>:
 80034d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034d2:	bf00      	nop
 80034d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034d6:	bc08      	pop	{r3}
 80034d8:	469e      	mov	lr, r3
 80034da:	4770      	bx	lr

080034dc <_fini>:
 80034dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034de:	bf00      	nop
 80034e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034e2:	bc08      	pop	{r3}
 80034e4:	469e      	mov	lr, r3
 80034e6:	4770      	bx	lr
